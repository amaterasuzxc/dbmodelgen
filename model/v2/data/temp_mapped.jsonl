{"id": 1336, "text": "Предприятие по реализации товаров по заказам. Предприятие располагает складом, на котором хранятся товары. Для получения товара клиент оформляет заказ. Для пополнения товаров на складе предприятие заключает договоры с поставщиками.\nБизнес-правила:\n1. Организация формирует заказы из товаров, имеющихся на складе.\n2. Клиент может оформить заказ на несколько товаров.\n3. Формированием заказа занимается один сотрудник.\nМинимальный набор сущностей: товар, клиент, поставщик, сотрудник.\nМинимальный набор атрибутов: наименование товара, назначение товара, стоимость товара; фамилия клиента, контактные данные клиента, адрес клиента; название фирмы поставщика, фамилия руководителя фирмы, контактные данные, адрес фирмы; фамилия сотрудника, должность сотрудника, оклад сотрудника, номер служебного телефона сотрудника.", "Comments": [], "entities": [{"start_offset": 512, "end_offset": 531, "label": "string"}, {"start_offset": 533, "end_offset": 550, "label": "string"}, {"start_offset": 552, "end_offset": 568, "label": "double"}, {"start_offset": 570, "end_offset": 585, "label": "string"}, {"start_offset": 587, "end_offset": 612, "label": "string"}, {"start_offset": 614, "end_offset": 627, "label": "string"}, {"start_offset": 629, "end_offset": 654, "label": "string"}, {"start_offset": 656, "end_offset": 682, "label": "string"}, {"start_offset": 684, "end_offset": 701, "label": "string"}, {"start_offset": 703, "end_offset": 714, "label": "string"}, {"start_offset": 716, "end_offset": 734, "label": "string"}, {"start_offset": 736, "end_offset": 756, "label": "string"}, {"start_offset": 758, "end_offset": 774, "label": "double"}, {"start_offset": 776, "end_offset": 812, "label": "integer"}]}
{"id": 1337, "text": "Ремонтная мастерская занимается ремонтом бытовой техники. Клиент оформляет заказ на ремонт изделия. Ремонт изделий осуществляется с использованием комплектующих, которые имеются на складе мастерской. Для пополнения комплектующих на складе мастерская заключает договоры с поставщиками.\nБизнес-правила:\n1. Существуют клиенты, нескольких категорий приоритетности.\n2. Каждый клиент может оформить неограниченное количество заказов.\n3. Клиенты оформляют один заказ на ремонт одного изделия.\n4. Для получения заменяемой детали сотрудник организации оформляет отдельный заказ на получение детали со склада.\n5. Один заказ выполняется одним сотрудником.\nМинимальный набор сущностей: изделие, клиент, сотрудник, деталь.\nМинимальный набор атрибутов: наименование изделия, вид изделия, стоимость изделия; фамилия клиента, контактные данные клиента, адрес клиента; фамилия сотрудника, должность сотрудника, оклад сотрудника, номер служебного телефона сотрудника; название детали, её стоимость, количество на складе, название фирмы производителя. ", "Comments": [], "entities": [{"start_offset": 739, "end_offset": 759, "label": "string"}, {"start_offset": 761, "end_offset": 772, "label": "string"}, {"start_offset": 774, "end_offset": 791, "label": "double"}, {"start_offset": 793, "end_offset": 808, "label": "string"}, {"start_offset": 810, "end_offset": 835, "label": "string"}, {"start_offset": 837, "end_offset": 850, "label": "string"}, {"start_offset": 852, "end_offset": 870, "label": "string"}, {"start_offset": 872, "end_offset": 892, "label": "string"}, {"start_offset": 894, "end_offset": 910, "label": "double"}, {"start_offset": 912, "end_offset": 948, "label": "integer"}, {"start_offset": 950, "end_offset": 965, "label": "string"}, {"start_offset": 970, "end_offset": 979, "label": "double"}, {"start_offset": 981, "end_offset": 1001, "label": "integer"}, {"start_offset": 1003, "end_offset": 1031, "label": "string"}]}
{"id": 1338, "text": "Фирма по прокату автомобилей. Фирма оказывает услуги, предоставляя автомобили из своего парка. Фирма выдаёт напрокат автомобили на основе договора. Сотрудник фирмы фиксирует данные о клиенте, данные об автомобиле, дату начала проката и количество дней проката.\nБизнес-правила:\n1. Клиент оформляет договор на прокат автомобиля.\n2. Клиент может оформить несколько договоров.\n3. Фирма ежегодно страхует автомобили в различных страховых компаниях.\n4. Стоимость проката зависит от марки автомобиля.\nМинимальный набор сущностей: автомобиль, клиент, страховая компания, сотрудник.\nМинимальный набор атрибутов: номер автомобиля, его цвет, марка, год выпуска, сумма страховки; фамилия клиента, номер его паспорта и водительского удостоверения, контактные данные (телефон, адрес), водительский стаж; название страховой компании, номер лицензии, адрес, фамилия руководителя; фамилия сотрудника, его должность, оклад, служебный телефон.", "Comments": [], "entities": [{"start_offset": 603, "end_offset": 619, "label": "string"}, {"start_offset": 625, "end_offset": 629, "label": "string"}, {"start_offset": 631, "end_offset": 636, "label": "string"}, {"start_offset": 638, "end_offset": 649, "label": "integer"}, {"start_offset": 651, "end_offset": 666, "label": "double"}, {"start_offset": 668, "end_offset": 683, "label": "string"}, {"start_offset": 695, "end_offset": 703, "label": "integer"}, {"start_offset": 706, "end_offset": 733, "label": "integer"}, {"start_offset": 735, "end_offset": 752, "label": "string"}, {"start_offset": 754, "end_offset": 761, "label": "integer"}, {"start_offset": 763, "end_offset": 768, "label": "string"}, {"start_offset": 771, "end_offset": 788, "label": "integer"}, {"start_offset": 790, "end_offset": 817, "label": "string"}, {"start_offset": 819, "end_offset": 833, "label": "integer"}, {"start_offset": 835, "end_offset": 840, "label": "string"}, {"start_offset": 842, "end_offset": 862, "label": "string"}, {"start_offset": 864, "end_offset": 882, "label": "string"}, {"start_offset": 888, "end_offset": 897, "label": "string"}, {"start_offset": 899, "end_offset": 904, "label": "double"}, {"start_offset": 906, "end_offset": 923, "label": "integer"}]}
{"id": 1339, "text": "Бизнес-правила:\n1. В гостинице имеются номера различной категории.\n2. Каждый номер закреплен за одним сотрудником. Один сотрудник может обслуживать несколько номеров.\n3. Гость может забронировать номер указанной категории на заданный срок.\n4. Стоимость номер и зависит от его категории и перечня дополнительных услуг, которыми пользовался гость.\nМинимальный набор сущностей: номер, сотрудник, гость, услуга.\nМинимальный набор атрибутов: номер комнаты, её тип, статус (занята, забронирована, свободна), состояние (готова к проживанию, требует уборки, требует ремонта); фамилия гостя, его категория, номер паспорта, дата заселения, срок пребывания, гражданство; фамилия сотрудника, специальность, оклад, контактный телефон.", "Comments": [], "entities": [{"start_offset": 437, "end_offset": 450, "label": "integer"}, {"start_offset": 455, "end_offset": 458, "label": "string"}, {"start_offset": 460, "end_offset": 466, "label": "string"}, {"start_offset": 502, "end_offset": 511, "label": "string"}, {"start_offset": 568, "end_offset": 581, "label": "string"}, {"start_offset": 587, "end_offset": 596, "label": "string"}, {"start_offset": 598, "end_offset": 612, "label": "integer"}, {"start_offset": 614, "end_offset": 628, "label": "timestamp"}, {"start_offset": 630, "end_offset": 645, "label": "integer"}, {"start_offset": 647, "end_offset": 658, "label": "string"}, {"start_offset": 660, "end_offset": 678, "label": "string"}, {"start_offset": 680, "end_offset": 693, "label": "string"}, {"start_offset": 695, "end_offset": 700, "label": "double"}, {"start_offset": 702, "end_offset": 720, "label": "integer"}]}
{"id": 1340, "text": "Бизнес-правила:\n1. Клиент оформляет договор на ремонт автомобиля.\n2. Один автомобиль ремонтирует одна бригада сотрудников.\n3. Для ремонта автомобиля используются комплектующие различного типа и производителей.\n4. Стоимость часа работы зависит от и категории бригады.\n5. Различают несколько категорий клиентов.\nМинимальный набор сущностей: автомобиль, клиент, бригада, деталь.\nМинимальный набор атрибутов: номер автомобиля, его цвет, марка, год выпуска; фамилия клиента, номер его паспорта и водительского удостоверения, контактные данные (телефон, адрес); номер бригады, категория, тип (определяет, какие марки машин могут ремонтировать), фамилия бригадира, служебный телефон, стоимость часа работы; название детали, её стоимость, производитель, наличие на складе.", "Comments": [], "entities": [{"start_offset": 405, "end_offset": 421, "label": "string"}, {"start_offset": 427, "end_offset": 431, "label": "string"}, {"start_offset": 433, "end_offset": 438, "label": "string"}, {"start_offset": 440, "end_offset": 451, "label": "integer"}, {"start_offset": 453, "end_offset": 468, "label": "string"}, {"start_offset": 480, "end_offset": 488, "label": "integer"}, {"start_offset": 491, "end_offset": 518, "label": "integer"}, {"start_offset": 520, "end_offset": 537, "label": "string"}, {"start_offset": 539, "end_offset": 546, "label": "integer"}, {"start_offset": 548, "end_offset": 553, "label": "string"}, {"start_offset": 556, "end_offset": 569, "label": "integer"}, {"start_offset": 571, "end_offset": 580, "label": "string"}, {"start_offset": 582, "end_offset": 585, "label": "string"}, {"start_offset": 639, "end_offset": 656, "label": "string"}, {"start_offset": 658, "end_offset": 675, "label": "integer"}, {"start_offset": 677, "end_offset": 698, "label": "double"}, {"start_offset": 700, "end_offset": 715, "label": "string"}, {"start_offset": 720, "end_offset": 729, "label": "double"}, {"start_offset": 731, "end_offset": 744, "label": "string"}, {"start_offset": 746, "end_offset": 763, "label": "boolean"}]}
{"id": 1341, "text": "Бизнес-правила:\n1. Агентство занимается оформлением недвижимости в аренду.\n2. Клиент может арендовать несколько объектов.\n3. Для оформления одного объекта оформляется один договор.\n4. С каждым объектом недвижимости работает один сотрудник.\nМинимальный набор сущностей: клиент, сотрудник, объект недвижимости, договор.\nМинимальный набор атрибутов: фамилия клиента, его категория, контактные данные клиента, адрес клиента, номер паспорта; фамилия сотрудника, должность сотрудника, оклад сотрудника, номер служебного телефона сотрудника; вид объекта (дом, квартира, комната и т.п.), его стоимость, адрес, состояние (новое, после ремонта, требует ремонта и т.п.), статус (занят, свободен); дата заключения договора, срок договора.", "Comments": [], "entities": [{"start_offset": 347, "end_offset": 362, "label": "string"}, {"start_offset": 368, "end_offset": 377, "label": "string"}, {"start_offset": 379, "end_offset": 404, "label": "string"}, {"start_offset": 406, "end_offset": 419, "label": "string"}, {"start_offset": 421, "end_offset": 435, "label": "integer"}, {"start_offset": 437, "end_offset": 455, "label": "string"}, {"start_offset": 457, "end_offset": 477, "label": "string"}, {"start_offset": 479, "end_offset": 495, "label": "double"}, {"start_offset": 497, "end_offset": 533, "label": "integer"}, {"start_offset": 535, "end_offset": 546, "label": "string"}, {"start_offset": 584, "end_offset": 593, "label": "double"}, {"start_offset": 595, "end_offset": 600, "label": "string"}, {"start_offset": 602, "end_offset": 612, "label": "string"}, {"start_offset": 660, "end_offset": 667, "label": "string"}, {"start_offset": 686, "end_offset": 710, "label": "timestamp"}, {"start_offset": 712, "end_offset": 725, "label": "integer"}]}
{"id": 1342, "text": "Бизнес-правила:\n1. Пациент заключает договор на лечение в заданном отделении больницы.\n2. У каждого пациента есть лечащий врач.\n3. Пациент может оплачивать свой договор за счёт страховой компании.\n4. Обследование пациента проводит не только лечащий врач.\nМинимальный набор сущностей: пациент, врач, обследование, страховая компания.\nМинимальный набор атрибутов: фамилия пациента, его категория, номер паспорта, номер страхового полиса, дата поступления, гражданство; фамилия врача, категория, специальность, оклад, контактный телефон; название обследования, вид обследования, дата проведения обследования, стоимость обследования; название страховой компании, номер лицензии, фамилия руководителя, контактный телефон.", "Comments": [], "entities": [{"start_offset": 362, "end_offset": 378, "label": "string"}, {"start_offset": 384, "end_offset": 393, "label": "string"}, {"start_offset": 395, "end_offset": 409, "label": "integer"}, {"start_offset": 411, "end_offset": 434, "label": "integer"}, {"start_offset": 436, "end_offset": 452, "label": "timestamp"}, {"start_offset": 454, "end_offset": 465, "label": "string"}, {"start_offset": 467, "end_offset": 480, "label": "string"}, {"start_offset": 482, "end_offset": 491, "label": "string"}, {"start_offset": 493, "end_offset": 506, "label": "string"}, {"start_offset": 508, "end_offset": 513, "label": "double"}, {"start_offset": 515, "end_offset": 533, "label": "integer"}, {"start_offset": 535, "end_offset": 556, "label": "string"}, {"start_offset": 558, "end_offset": 574, "label": "string"}, {"start_offset": 576, "end_offset": 604, "label": "timestamp"}, {"start_offset": 606, "end_offset": 628, "label": "double"}, {"start_offset": 630, "end_offset": 657, "label": "string"}, {"start_offset": 659, "end_offset": 673, "label": "integer"}, {"start_offset": 675, "end_offset": 695, "label": "string"}, {"start_offset": 697, "end_offset": 715, "label": "integer"}]}
{"id": 1343, "text": "Бизнес-правила:\n1. Для выполнения работ типография заключает договор с клиентом.\n2. Один договор выполняет одна бригада сотрудников.\n3. Стоимость работ зависит от вида продукции, вида материалов и тиража издания.\n4. Различают несколько категорий клиентов.\n5. Для выполнения работ используются материалы.\nМинимальный набор сущностей: клиент, издание, бригада сотрудников, материал.\nМинимальный набор атрибутов: фамилия клиента, контактные данные клиента, адрес клиента; наименование издания, его вид, стоимость издания; номер бригады, специализация, номер служебного телефона бригадира; название материала, её стоимость, количество на складе, название фирмы производителя. ", "Comments": [], "entities": [{"start_offset": 410, "end_offset": 425, "label": "string"}, {"start_offset": 427, "end_offset": 452, "label": "string"}, {"start_offset": 454, "end_offset": 467, "label": "string"}, {"start_offset": 469, "end_offset": 489, "label": "string"}, {"start_offset": 495, "end_offset": 498, "label": "string"}, {"start_offset": 500, "end_offset": 517, "label": "double"}, {"start_offset": 519, "end_offset": 532, "label": "integer"}, {"start_offset": 534, "end_offset": 547, "label": "string"}, {"start_offset": 549, "end_offset": 584, "label": "integer"}, {"start_offset": 586, "end_offset": 604, "label": "string"}, {"start_offset": 609, "end_offset": 618, "label": "double"}, {"start_offset": 620, "end_offset": 640, "label": "integer"}, {"start_offset": 642, "end_offset": 670, "label": "string"}]}
{"id": 1344, "text": "Бизнес-правила:\n1. Договор страхования заключается между страховой компанией и клиентом сроком не более 1 года (но может быть и меньше).\n2. При заключении договора указывается вид страхования, страховая сумма, дата начала действия договора.\n3. Один клиент может заключить несколько договоров.\n4. Один сотрудник работает с несколькими клиентами.\n5. Страхование осуществляется на основе существующего вида услуг.\nМинимальный набор сущностей: клиент, сотрудник, страховой продукт, договор.\nМинимальный набор атрибутов: фамилия клиента, его категория, контактные данные клиента, адрес клиента, номер паспорта; фамилия сотрудника, должность сотрудника, оклад сотрудника, номер служебного телефона сотрудника; название страхового продукта (дом, квартира, комната, автомобиль и т.п.), его базовая стоимость; дата заключения договора, дата завершения, объект страхования, его оценочная стоимость.", "Comments": [], "entities": [{"start_offset": 516, "end_offset": 531, "label": "string"}, {"start_offset": 537, "end_offset": 546, "label": "string"}, {"start_offset": 548, "end_offset": 573, "label": "string"}, {"start_offset": 575, "end_offset": 588, "label": "string"}, {"start_offset": 590, "end_offset": 604, "label": "integer"}, {"start_offset": 606, "end_offset": 624, "label": "string"}, {"start_offset": 626, "end_offset": 646, "label": "string"}, {"start_offset": 648, "end_offset": 664, "label": "double"}, {"start_offset": 666, "end_offset": 702, "label": "integer"}, {"start_offset": 704, "end_offset": 732, "label": "string"}, {"start_offset": 782, "end_offset": 799, "label": "double"}, {"start_offset": 801, "end_offset": 825, "label": "timestamp"}, {"start_offset": 827, "end_offset": 842, "label": "timestamp"}, {"start_offset": 844, "end_offset": 862, "label": "string"}, {"start_offset": 868, "end_offset": 887, "label": "double"}]}
{"id": 1345, "text": "Необходимо создать базу данных для приложения, учитывающего информацию о домашней коллекции CD и DVD. Хранится информация о контенте диска (музыка, фильмы). Для музыкального произведения хранится информация об исполнителе, альбоме, название песни, жанр и год выхода альбома. Для фильма – название, режиссер, список актеров и жанр фильма. Необходимо учитывать, что песня или фильм могут встречаться более чем на одном диске.", "Comments": [], "entities": [{"start_offset": 210, "end_offset": 221, "label": "string"}, {"start_offset": 223, "end_offset": 230, "label": "string"}, {"start_offset": 232, "end_offset": 246, "label": "string"}, {"start_offset": 248, "end_offset": 252, "label": "string"}, {"start_offset": 255, "end_offset": 273, "label": "integer"}, {"start_offset": 288, "end_offset": 296, "label": "string"}, {"start_offset": 298, "end_offset": 306, "label": "string"}, {"start_offset": 308, "end_offset": 322, "label": "string"}, {"start_offset": 325, "end_offset": 336, "label": "string"}]}
{"id": 1346, "text": "Необходимо создать базу данных для приложения, обслуживающего информационные потребности цветочного магазина. В БД должны храниться сведения о цветах, которые есть в продаже (название, класс, цена, кол-во экземпляров, срок завоза, страна происхождения). Кроме этого, необходимо создать иерархический классификатор цветов (Класс-Отряд-Семейство-Вид) для облегчения поиска необходимых растений. Каждый класс имеет название и краткое описание. БД также должна учитывать продажи цветов (дата продажи, кол-во проданных экземпляров).", "Comments": [], "entities": [{"start_offset": 175, "end_offset": 183, "label": "string"}, {"start_offset": 185, "end_offset": 190, "label": "string"}, {"start_offset": 192, "end_offset": 196, "label": "double"}, {"start_offset": 198, "end_offset": 216, "label": "integer"}, {"start_offset": 218, "end_offset": 229, "label": "integer"}, {"start_offset": 231, "end_offset": 251, "label": "string"}, {"start_offset": 412, "end_offset": 421, "label": "string"}, {"start_offset": 423, "end_offset": 439, "label": "string"}, {"start_offset": 483, "end_offset": 495, "label": "timestamp"}, {"start_offset": 497, "end_offset": 525, "label": "integer"}]}
{"id": 1347, "text": "Для пункта проката видеопродукции необходимо создать приложение и БД для учета выдачи видео. Видео может храниться на DVD, CD или видеокассетах, причем один и тот же фильм может встречаться на разных носителях. Для каждого фильма необходимо хранить информацию о названии, жанре, режиссере и список актеров. Для каждой единицы проката необходимо хранить цену проката за сутки и сумму залога. При выдаче прокатной продукции необходимо сохранять дату выдачи и ФИО клиента. При возврате – дату возврата.", "Comments": [], "entities": [{"start_offset": 262, "end_offset": 270, "label": "string"}, {"start_offset": 272, "end_offset": 277, "label": "string"}, {"start_offset": 279, "end_offset": 289, "label": "string"}, {"start_offset": 291, "end_offset": 305, "label": "string"}, {"start_offset": 353, "end_offset": 374, "label": "double"}, {"start_offset": 377, "end_offset": 389, "label": "double"}, {"start_offset": 443, "end_offset": 454, "label": "timestamp"}, {"start_offset": 457, "end_offset": 468, "label": "string"}, {"start_offset": 485, "end_offset": 498, "label": "timestamp"}]}
{"id": 1348, "text": "При факультете ПММ организовали платные курсы для обучения школьников информатике. Для каждого курса хранится информация о продолжительности (в часах), стоимости, программа курса (список тем), а также фамилия преподавателя. Школьники могут записаться на один или несколько курсов. При регистрации школьника записывается его ФИО и школа и класс, в которой он обучается. Оплата может производиться сразу, а может – позже. При окончании курса выдается свидетельство, номер которого записывается в БД.", "Comments": [], "entities": [{"start_offset": 123, "end_offset": 141, "label": "integer"}, {"start_offset": 152, "end_offset": 161, "label": "double"}, {"start_offset": 163, "end_offset": 178, "label": "string"}, {"start_offset": 201, "end_offset": 222, "label": "string"}, {"start_offset": 324, "end_offset": 328, "label": "string"}, {"start_offset": 330, "end_offset": 336, "label": "string"}, {"start_offset": 338, "end_offset": 343, "label": "string"}, {"start_offset": 464, "end_offset": 470, "label": "integer"}]}
{"id": 1349, "text": "Для хранения данных на сайте необходимо создать базу данных. Требования к данным:\n1. Необходимо хранить информацию о пользователях: псевдоним, реальные фамилию,имя, отчество, номер ICQ, телефон, e-mail. У пользователя может быть несколько e-mail, но только один из них является основным, который будет использоваться для связи. Кроме этого, у пользователя может быть один или несколько аватаров – графических файлов. Для аватара необходимо хранить имя файла и размер.\n2. Каждый пользователь может создать несколько сообщений, которые тоже нужно хранить в базе данных. Для каждого сообщения хранится тема, дата создания и текст сообщения. К сообщению могут быть приложены дополнительные файлы, для них нужно хранить полное размещение, тип (документ, графика, видео), размер и описание.\n3. На каждое сообщение другие пользователи могут оставлять свои сообщения. Допускаются анонимные пользователи.\n4. У каждого пользователя могут быть друзья из числа других пользователей.", "Comments": [], "entities": [{"start_offset": 132, "end_offset": 141, "label": "string"}, {"start_offset": 152, "end_offset": 159, "label": "string"}, {"start_offset": 160, "end_offset": 163, "label": "string"}, {"start_offset": 165, "end_offset": 173, "label": "string"}, {"start_offset": 175, "end_offset": 184, "label": "integer"}, {"start_offset": 186, "end_offset": 193, "label": "integer"}, {"start_offset": 195, "end_offset": 201, "label": "string"}, {"start_offset": 239, "end_offset": 245, "label": "string"}, {"start_offset": 448, "end_offset": 457, "label": "string"}, {"start_offset": 460, "end_offset": 466, "label": "integer"}, {"start_offset": 599, "end_offset": 603, "label": "string"}, {"start_offset": 605, "end_offset": 618, "label": "timestamp"}, {"start_offset": 621, "end_offset": 636, "label": "string"}, {"start_offset": 715, "end_offset": 732, "label": "string"}, {"start_offset": 734, "end_offset": 738, "label": "string"}, {"start_offset": 766, "end_offset": 773, "label": "integer"}, {"start_offset": 775, "end_offset": 783, "label": "string"}]}
{"id": 1350, "text": "В ГИБДД решили автоматизировать деятельность одного из своих подразделений и создать приложение для учета автомобилей. В базе данных необходимо хранить информацию об автомобилях и их владельцах. Человек может владеть несколькими автомобилями. Необходимо хранить следующую информацию:\n1. О владельце: ФИО, номер паспорта, номер водительского удостоверения, адрес\n2. Об автомобиле: модель, номер кузова, номер двигателя, номер тех. паспорта, дату регистрации.\n3. Необходимо хранить историю смены владельцев\n4. Так же необходимо хранить информацию об угнанных и найденных автомобилях, для этого необходимо предусмотреть хранение информации о дате угона, месте угона, дате и месте нахождения.", "Comments": [], "entities": [{"start_offset": 300, "end_offset": 303, "label": "string"}, {"start_offset": 305, "end_offset": 319, "label": "integer"}, {"start_offset": 321, "end_offset": 354, "label": "integer"}, {"start_offset": 356, "end_offset": 361, "label": "string"}, {"start_offset": 380, "end_offset": 386, "label": "string"}, {"start_offset": 388, "end_offset": 400, "label": "integer"}, {"start_offset": 402, "end_offset": 417, "label": "integer"}, {"start_offset": 419, "end_offset": 438, "label": "integer"}, {"start_offset": 440, "end_offset": 456, "label": "timestamp"}, {"start_offset": 639, "end_offset": 649, "label": "timestamp"}, {"start_offset": 651, "end_offset": 662, "label": "string"}, {"start_offset": 664, "end_offset": 687, "label": "string"}]}
{"id": 1351, "text": "База данных хроники восхождений в альпинистском клубе. В базе данных должны записываться даты начала и завершения каждого восхождения, имена и адреса участвовавших в нем альпинистов, название и высота горы, страна и район, где эта гора расположена.", "Comments": [], "entities": [{"start_offset": 89, "end_offset": 100, "label": "timestamp"}, {"start_offset": 103, "end_offset": 114, "label": "timestamp"}, {"start_offset": 135, "end_offset": 141, "label": "string"}, {"start_offset": 143, "end_offset": 150, "label": "string"}, {"start_offset": 183, "end_offset": 192, "label": "string"}, {"start_offset": 194, "end_offset": 201, "label": "integer"}, {"start_offset": 207, "end_offset": 214, "label": "string"}, {"start_offset": 216, "end_offset": 221, "label": "string"}]}
{"id": 1352, "text": "База данных медицинского кооператива. Базу данных использует для работы коллектив врачей. В таблицы должны быть занесены имя, пол, дата рождения и домашний адрес каждого их пациента. Всякий раз, когда врач осматривает больного, явившегося к нему на прием, или сам приходит к нему на дом, он записывает дату и место, где проводится осмотр, симптомы, диагноз и предписания больному, проставляет имя пациента, а также свое имя. Если врач прописывает больному какое-либо лекарство, в таблицу заносится название лекарства, способ его приема, словесное описание предполагаемого действия и возможных побочных эффектов.", "Comments": [], "entities": [{"start_offset": 121, "end_offset": 124, "label": "string"}, {"start_offset": 126, "end_offset": 129, "label": "string"}, {"start_offset": 131, "end_offset": 144, "label": "timestamp"}, {"start_offset": 147, "end_offset": 161, "label": "string"}, {"start_offset": 302, "end_offset": 307, "label": "timestamp"}, {"start_offset": 309, "end_offset": 314, "label": "string"}, {"start_offset": 339, "end_offset": 347, "label": "string"}, {"start_offset": 349, "end_offset": 357, "label": "string"}, {"start_offset": 359, "end_offset": 379, "label": "string"}, {"start_offset": 393, "end_offset": 405, "label": "string"}, {"start_offset": 420, "end_offset": 423, "label": "string"}, {"start_offset": 498, "end_offset": 516, "label": "string"}, {"start_offset": 518, "end_offset": 535, "label": "string"}, {"start_offset": 537, "end_offset": 610, "label": "string"}]}
{"id": 1353, "text": "База данных Городской Думы. В базе хранятся имена, адреса, домашние и служебные телефоны всех членов Думы. В Думе работает порядка сорока комиссий, все участники которых являются членами Думы. Каждая комиссия имеет свой профиль, например, вопросы образования, проблемы, связанные с жильем и так далее. Данные по каждой из комиссий включают: ее нынешний состав и председатель, прежние председатели и члены этой комиссии, участвовавшие в ее работе за прошедшие 10 лет, даты включения и выхода из состава комиссии, избрания ее председателей. Члены Думы могут заседать в нескольких комиссиях. В базу заносятся время и место проведения каждого заседания комиссии с указанием депутатов и служащих Думы, которые участвуют в его организации.", "Comments": [], "entities": [{"start_offset": 44, "end_offset": 49, "label": "string"}, {"start_offset": 51, "end_offset": 57, "label": "string"}, {"start_offset": 80, "end_offset": 89, "label": "integer"}, {"start_offset": 344, "end_offset": 359, "label": "string"}, {"start_offset": 362, "end_offset": 374, "label": "string"}, {"start_offset": 384, "end_offset": 397, "label": "string"}, {"start_offset": 399, "end_offset": 405, "label": "string"}, {"start_offset": 467, "end_offset": 472, "label": "timestamp"}, {"start_offset": 606, "end_offset": 612, "label": "timestamp"}, {"start_offset": 614, "end_offset": 620, "label": "string"}, {"start_offset": 670, "end_offset": 695, "label": "string"}]}
{"id": 1354, "text": "Фирме принадлежит небольшая флотилия рыболовных катеров. Каждый катер имеет \"паспорт\", куда занесены его название, тип, водоизмещение и дата постройки. Фирма регистрирует каждый выход на лов, записывая название катера, имена и адреса членов команды с указанием их должностей (капитан, боцман и т.д.), даты выхода и возвращения, а также вес пойманной рыбы отдельно по сортам (например, трески). За время одного рейса катер может посетить несколько банок. Фиксируется дата прихода на каждую банку и дата отплытия, качество выловленной рыбы (отличное, хорошее,\nплохое). На борту улов не взвешивается. ", "Comments": [], "entities": [{"start_offset": 105, "end_offset": 113, "label": "string"}, {"start_offset": 115, "end_offset": 118, "label": "string"}, {"start_offset": 120, "end_offset": 134, "label": "integer"}, {"start_offset": 136, "end_offset": 150, "label": "timestamp"}, {"start_offset": 202, "end_offset": 217, "label": "string"}, {"start_offset": 219, "end_offset": 225, "label": "string"}, {"start_offset": 227, "end_offset": 234, "label": "string"}, {"start_offset": 264, "end_offset": 275, "label": "string"}, {"start_offset": 301, "end_offset": 306, "label": "timestamp"}, {"start_offset": 336, "end_offset": 354, "label": "double"}, {"start_offset": 466, "end_offset": 481, "label": "timestamp"}, {"start_offset": 497, "end_offset": 510, "label": "timestamp"}, {"start_offset": 512, "end_offset": 537, "label": "string"}]}
{"id": 1355, "text": "База данных фирмы, проводящей аукционы. Фирма занимается продажей с аукциона антикварных изделий и произведений искусства. Владельцы вещей, выставляемых на проводимых фирмой аукционах, юридически являются продавцами. Лица, приобретающие эти вещи, именуются покупателями. Получив от продавцов партию предметов, фирма решает, на котором из аукционов выгоднее представить конкретный предмет. Перед проведением очередного аукциона каждой из выставляемых на нем вещей присваивается отдельный номер лота, играющий ту же роль, что и введенный ранее шифр товара. Две вещи, продаваемые на различных аукционах, могут иметь одинаковые номера лотов.\nВ книгах фирмы делается запись о каждом аукционе. Там отмечаются дата, место и время его проведения, а также специфика (например, выставляются картины, написанные маслом и не ранее 1900 г.). Заносятся также сведения о каждом продаваемом предмете: аукцион, на который он заявлен, номер лота, продавец, отправная цена и краткое словесное описание. Продавцу разрешается выставлять любое количество вещей, а покупатель имеет право приобретать любое количество вещей. Одно и то же лицо или фирма может выступать и как продавец, и как покупатель.\nПосле аукциона служащие фирмы, проводящей аукционы, записывают фактическую цену, уплаченную за проданный предмет, и фиксируют данные покупателя. ", "Comments": [], "entities": [{"start_offset": 487, "end_offset": 497, "label": "integer"}, {"start_offset": 542, "end_offset": 553, "label": "string"}, {"start_offset": 624, "end_offset": 636, "label": "integer"}, {"start_offset": 703, "end_offset": 707, "label": "timestamp"}, {"start_offset": 709, "end_offset": 715, "label": "string"}, {"start_offset": 717, "end_offset": 723, "label": "timestamp"}, {"start_offset": 747, "end_offset": 757, "label": "string"}, {"start_offset": 885, "end_offset": 892, "label": "string"}, {"start_offset": 917, "end_offset": 927, "label": "integer"}, {"start_offset": 929, "end_offset": 937, "label": "string"}, {"start_offset": 939, "end_offset": 953, "label": "double"}, {"start_offset": 956, "end_offset": 982, "label": "string"}, {"start_offset": 1242, "end_offset": 1258, "label": "double"}, {"start_offset": 1274, "end_offset": 1291, "label": "string"}, {"start_offset": 1305, "end_offset": 1322, "label": "string"}]}
{"id": 1356, "text": "Разработать информационную систему обслуживания библиотеки, которая содержит следующую информацию: названия книг, ФИО авторов, наименования издательств, год издания, количество страниц, количество иллюстраций, стоимость, название филиала библиотеки или книгохранилища, в которых находится книга, количество имеющихся в библиотеке экземпляров конкретной книги, количество студентов, которым выдавалась конкретная книга, названия факультетов, в\nучебном процессе которых используется указанная книга.", "Comments": [], "entities": [{"start_offset": 99, "end_offset": 112, "label": "string"}, {"start_offset": 114, "end_offset": 125, "label": "string"}, {"start_offset": 127, "end_offset": 151, "label": "string"}, {"start_offset": 153, "end_offset": 164, "label": "integer"}, {"start_offset": 166, "end_offset": 184, "label": "integer"}, {"start_offset": 186, "end_offset": 208, "label": "integer"}, {"start_offset": 210, "end_offset": 219, "label": "double"}, {"start_offset": 221, "end_offset": 237, "label": "string"}, {"start_offset": 296, "end_offset": 316, "label": "integer"}, {"start_offset": 360, "end_offset": 400, "label": "integer"}, {"start_offset": 419, "end_offset": 480, "label": "string"}]}
{"id": 1357, "text": "База данных по учету успеваемости студентов. База данных должна содержать данные о контингенте студентов (фамилия, имя, отчество, год поступления, форма обучения (дневная/вечерняя/заочная), номер или название группы); об учебном плане (название специальности, дисциплина, семестр, количество отводимых на дисциплину часов, форма отчетности (экзамен/зачет)); о журнале успеваемости студентов (год/семестр, студент, дисциплина, оценка).", "Comments": [], "entities": [{"start_offset": 106, "end_offset": 113, "label": "string"}, {"start_offset": 115, "end_offset": 118, "label": "string"}, {"start_offset": 120, "end_offset": 128, "label": "string"}, {"start_offset": 130, "end_offset": 145, "label": "integer"}, {"start_offset": 147, "end_offset": 161, "label": "string"}, {"start_offset": 190, "end_offset": 215, "label": "string"}, {"start_offset": 236, "end_offset": 258, "label": "string"}, {"start_offset": 260, "end_offset": 270, "label": "string"}, {"start_offset": 272, "end_offset": 279, "label": "integer"}, {"start_offset": 281, "end_offset": 321, "label": "integer"}, {"start_offset": 323, "end_offset": 339, "label": "string"}, {"start_offset": 392, "end_offset": 395, "label": "integer"}, {"start_offset": 396, "end_offset": 403, "label": "integer"}, {"start_offset": 405, "end_offset": 412, "label": "string"}, {"start_offset": 414, "end_offset": 424, "label": "string"}, {"start_offset": 426, "end_offset": 432, "label": "integer"}]}
{"id": 1358, "text": "База данных для учета аудиторного фонда университета. База данных должна содержать следующую информацию об аудиторном фонде университета. Наименование корпуса, в котором расположено помещение, номер комнаты, расположение комнаты в корпусе, ширина и длина комнаты в метрах, назначение и вид помещения, подразделение университета, за которым закреплено помещение. В базе данных также должна быть информация о высоте потолков в помещениях в зависимости от места расположения помещений в корпусе. Следует также учитывать, что структура подразделений университета имеет иерархический вид, когда одни подразделения входят в состав других (факультет, кафедра, лаборатория). ", "Comments": [], "entities": [{"start_offset": 138, "end_offset": 158, "label": "string"}, {"start_offset": 193, "end_offset": 206, "label": "integer"}, {"start_offset": 208, "end_offset": 238, "label": "string"}, {"start_offset": 240, "end_offset": 247, "label": "integer"}, {"start_offset": 249, "end_offset": 255, "label": "integer"}, {"start_offset": 273, "end_offset": 284, "label": "string"}, {"start_offset": 286, "end_offset": 290, "label": "string"}, {"start_offset": 301, "end_offset": 327, "label": "string"}, {"start_offset": 407, "end_offset": 422, "label": "integer"}]}
{"id": 1359, "text": "База данных для регистрации происшествий. Необходимо создать Базу данных для регистрации происшествий. База данных должна содержать данные для регистрации сообщений о происшествиях (регистрационный номер сообщения, дата регистрации, краткая фабула (тип происшествия); информацию о принятом по происшествию решении (отказано в возбуждении дел, удовлетворено ходатайство о возбуждении уголовного дела с указанием регистрационный номера заведенного дела, отправлено по территориальному признаку); информацию о лицах, виновных или подозреваемых в совершении происшествия (регистрационный номер лица, фамилия, имя, отчество, адрес, количество судимостей), отношение конкретных лиц к конкретным происшествиям (виновник, потерпевший, подозреваемый, свидетель)", "Comments": [], "entities": [{"start_offset": 182, "end_offset": 213, "label": "integer"}, {"start_offset": 215, "end_offset": 231, "label": "timestamp"}, {"start_offset": 233, "end_offset": 247, "label": "string"}, {"start_offset": 315, "end_offset": 341, "label": "boolean"}, {"start_offset": 343, "end_offset": 398, "label": "boolean"}, {"start_offset": 411, "end_offset": 450, "label": "integer"}, {"start_offset": 452, "end_offset": 491, "label": "boolean"}, {"start_offset": 568, "end_offset": 594, "label": "integer"}, {"start_offset": 596, "end_offset": 603, "label": "string"}, {"start_offset": 605, "end_offset": 608, "label": "string"}, {"start_offset": 610, "end_offset": 618, "label": "string"}, {"start_offset": 620, "end_offset": 625, "label": "string"}, {"start_offset": 627, "end_offset": 648, "label": "integer"}, {"start_offset": 704, "end_offset": 712, "label": "string"}, {"start_offset": 714, "end_offset": 725, "label": "string"}, {"start_offset": 727, "end_offset": 740, "label": "string"}, {"start_offset": 742, "end_offset": 751, "label": "string"}]}
{"id": 1360, "text": "База данных для обслуживания работы конференции. База данных должна содержать справочник персоналий участников конференции (фамилия, имя, отчество, ученая степень, ученое звание, научное направление, место работы, кафедра (отдел), должность, страна, город, почтовый индекс, адрес, рабочий телефон, домашний телефон, e-mail), и информацию, связанную с участием в конференции (докладчик или участник, дата рассылки 1-го приглашения, дата поступления заявки, тема доклада, отметка о поступлении тезисов, дата рассылки 2-го приглашения, дата поступления оргвзноса, размер поступившего оргвзноса, дата приезда, дата отъезда, потребность в гостинице). ", "Comments": [], "entities": [{"start_offset": 124, "end_offset": 131, "label": "string"}, {"start_offset": 133, "end_offset": 136, "label": "string"}, {"start_offset": 138, "end_offset": 146, "label": "string"}, {"start_offset": 148, "end_offset": 162, "label": "string"}, {"start_offset": 164, "end_offset": 177, "label": "string"}, {"start_offset": 179, "end_offset": 198, "label": "string"}, {"start_offset": 200, "end_offset": 212, "label": "string"}, {"start_offset": 214, "end_offset": 222, "label": "string"}, {"start_offset": 231, "end_offset": 240, "label": "string"}, {"start_offset": 242, "end_offset": 248, "label": "string"}, {"start_offset": 250, "end_offset": 255, "label": "string"}, {"start_offset": 257, "end_offset": 272, "label": "integer"}, {"start_offset": 274, "end_offset": 279, "label": "string"}, {"start_offset": 281, "end_offset": 296, "label": "integer"}, {"start_offset": 298, "end_offset": 314, "label": "integer"}, {"start_offset": 316, "end_offset": 322, "label": "string"}, {"start_offset": 375, "end_offset": 397, "label": "boolean"}, {"start_offset": 399, "end_offset": 429, "label": "timestamp"}, {"start_offset": 431, "end_offset": 454, "label": "timestamp"}, {"start_offset": 456, "end_offset": 468, "label": "string"}, {"start_offset": 470, "end_offset": 499, "label": "boolean"}, {"start_offset": 501, "end_offset": 531, "label": "timestamp"}, {"start_offset": 533, "end_offset": 559, "label": "timestamp"}, {"start_offset": 561, "end_offset": 590, "label": "double"}, {"start_offset": 592, "end_offset": 604, "label": "timestamp"}, {"start_offset": 606, "end_offset": 618, "label": "timestamp"}, {"start_offset": 620, "end_offset": 643, "label": "boolean"}]}
{"id": 1361, "text": "База данных должна обеспечить автоматизацию складского учета. В ней должны содержаться следующие данные:\n• информация о \"единицах хранения\" - номер ордера, дата, код поставщика, балансный счет, код сопроводительного документа по справочнику документов, номер сопроводительного документа, код материала по справочнику материалов, счет материала, код единицы измерения, количество пришедшего материала, цена единицы измерения);\n• информация о хранящихся на складе материалах (справочник материалов - код класса материала, код группы материала, наименование материала);\n• информация о единицах измерения конкретных видов материалов - код материала, единица измерения (метры, килограммы, литры и т.д.);\n• информация о поставщиках материалов - код поставщика, его наименование, ИНН, юридический адрес (индекс, город, улица, дом), адрес банка (индекс, город, улица, дом), номер банковского счета. ", "Comments": [], "entities": [{"start_offset": 142, "end_offset": 154, "label": "integer"}, {"start_offset": 156, "end_offset": 160, "label": "timestamp"}, {"start_offset": 162, "end_offset": 176, "label": "integer"}, {"start_offset": 178, "end_offset": 192, "label": "string"}, {"start_offset": 194, "end_offset": 225, "label": "integer"}, {"start_offset": 253, "end_offset": 286, "label": "integer"}, {"start_offset": 288, "end_offset": 301, "label": "integer"}, {"start_offset": 329, "end_offset": 343, "label": "string"}, {"start_offset": 345, "end_offset": 366, "label": "integer"}, {"start_offset": 368, "end_offset": 399, "label": "integer"}, {"start_offset": 401, "end_offset": 423, "label": "double"}, {"start_offset": 498, "end_offset": 518, "label": "integer"}, {"start_offset": 520, "end_offset": 540, "label": "integer"}, {"start_offset": 542, "end_offset": 564, "label": "string"}, {"start_offset": 631, "end_offset": 644, "label": "integer"}, {"start_offset": 646, "end_offset": 663, "label": "string"}, {"start_offset": 739, "end_offset": 753, "label": "integer"}, {"start_offset": 759, "end_offset": 771, "label": "string"}, {"start_offset": 773, "end_offset": 776, "label": "integer"}, {"start_offset": 778, "end_offset": 795, "label": "string"}, {"start_offset": 825, "end_offset": 836, "label": "string"}, {"start_offset": 866, "end_offset": 889, "label": "integer"}]}
{"id": 1362, "text": "Завод \"Прогресс\" поставляет товары (изделие А, изделие В, изделие С и др.) заказчикам по договорам. Для каждого товара определены планы поставок. Необходимо спроектировать базу данных ПОСТАВКА ТОВАРОВ, информация которой будет использоваться для анализа выполнения заводом планов поставок.\nВ БД должна храниться информация:\n• о ТОВАРАХ: код товара, наименование товара, цена товара (тыс. руб.);\n• ЗАКАЗАХ на поставку товаров: код заказа, наименование заказчика, адрес заказчика, телефон, номер договора, дата заключения договора, наименование товара, плановая поставка (шт.);\n• фактических ОТГРУЗКАХ товаров: код отгрузки, код заказа, дата отгрузки, отгружено товара (шт.).\nПри проектировании БД необходимо учитывать следующее:\n• товар имеет несколько заказов на поставку. Заказ соответствует одному товару;\n• товару могут соответствовать несколько отгрузок. В отгрузке могут участвовать несколько товаров.\nКроме того следует учесть:\n• товар не обязательно имеет заказ. Каждому заказу обязательно соответствует товар;\n• товар не обязательно отгружается заказчику. Каждая отгрузка обязательно соответствует некоторому товару.", "Comments": [], "entities": [{"start_offset": 337, "end_offset": 347, "label": "integer"}, {"start_offset": 349, "end_offset": 368, "label": "string"}, {"start_offset": 370, "end_offset": 381, "label": "double"}, {"start_offset": 426, "end_offset": 436, "label": "integer"}, {"start_offset": 438, "end_offset": 460, "label": "string"}, {"start_offset": 462, "end_offset": 477, "label": "string"}, {"start_offset": 479, "end_offset": 486, "label": "integer"}, {"start_offset": 488, "end_offset": 502, "label": "integer"}, {"start_offset": 504, "end_offset": 528, "label": "timestamp"}, {"start_offset": 530, "end_offset": 549, "label": "string"}, {"start_offset": 551, "end_offset": 568, "label": "integer"}, {"start_offset": 609, "end_offset": 621, "label": "integer"}, {"start_offset": 623, "end_offset": 633, "label": "integer"}, {"start_offset": 635, "end_offset": 648, "label": "timestamp"}, {"start_offset": 650, "end_offset": 666, "label": "integer"}]}
{"id": 1363, "text": "Магазин розничной торговли продает персональные компьютеры, средства связи и периферийное оборудование: принтеры, накопители CD-RW и др. Необходимо спроектировать базу данных РОЗНИЧНАЯ ТОРГОВЛЯ, информация которой будет использоваться для анализа продаж в магазине.\nВ БД должна храниться информация:\n• о ТОВАРАХ: код товара, наименование товара, дата поступления в магазин, количество товара, цена закупки (руб.);\n• ПОСТАВЩИКАХ товаров: код поставщика, наименование поставщика, адрес, телефон, к кому обращаться;\n• ПРОДАЖАХ товаров в магазине: код продажи, код товара, дата продажи, количество проданного товара (шт.), цена розничная (руб.).\nПри проектировании БД необходимо учитывать следующее:\n• поставщик поставляет несколько товаров. Товар поступает на склад магазина от нескольких поставщиков;\n• товар имеет несколько продаж. Продажа относится к одному товару.\nКроме того следует учесть:\n• поставщик не обязательно поставляет товар (может временно не работать). Каждый товар обязательно поставляется;\n• товар не обязательно продается. Каждая продажа обязательно связана с товаром.", "Comments": [], "entities": [{"start_offset": 313, "end_offset": 323, "label": "integer"}, {"start_offset": 325, "end_offset": 344, "label": "string"}, {"start_offset": 346, "end_offset": 372, "label": "timestamp"}, {"start_offset": 374, "end_offset": 391, "label": "integer"}, {"start_offset": 393, "end_offset": 405, "label": "double"}, {"start_offset": 437, "end_offset": 451, "label": "integer"}, {"start_offset": 453, "end_offset": 476, "label": "string"}, {"start_offset": 478, "end_offset": 483, "label": "string"}, {"start_offset": 485, "end_offset": 492, "label": "integer"}, {"start_offset": 543, "end_offset": 555, "label": "integer"}, {"start_offset": 557, "end_offset": 567, "label": "integer"}, {"start_offset": 569, "end_offset": 581, "label": "timestamp"}, {"start_offset": 583, "end_offset": 611, "label": "integer"}, {"start_offset": 619, "end_offset": 633, "label": "double"}]}
{"id": 1364, "text": "Клиентам банка предлагается размещать денежные средства на срочные банковские вклады различных видов (табл. 2.1).\nСрочные банковские вклады\nНаименование вклада\t                                                 Срок хранения, мес.\tСтавка, % годовых\nНакопительный (в российских рублях)\t      13\t                                           10 %\nКапитал (в долларах США)\t \t                    18                                                7 %\nПобеда (в белорусских рублях)\t \t      13                                               Ставка рефинансирования + 2 %\nК отпуску (в белорусских рублях)\t \t      12                                               Ставка рефинансирования – 1 %\nНакопительный (в белорусских рублях)\t      36\t                                            18 %\nНеобходимо спроектировать базу данных БАНКОВСКИЕ ВКЛАДЫ, информация которой будет использоваться для анализа работы с клиентами по вкладам.\nВ БД должна храниться информация:\n• о ВКЛАДАХ, которые предоставляет банк: код вклада; наименование вклада; срок хранения (месяцев); ставка, % годовых;\n• КЛИЕНТАХ, которые помещают денежные средства на вклады: код клиента, Ф.И.О. клиента, номер паспорта, адрес, телефон;\n• СЧЕТАХ клиентов банка: № счета, код клиента, код вклада, дата открытия счета, дата закрытия счета, сумма вложенная (руб.).\nПри проектировании БД необходимо учитывать следующее:\n• клиент банка может помещать свои средства на несколько счетов. Счет открывается на одного клиента;\n• каждый вид вклада связан с несколькими счетами клиентов. Счет относится к одному виду вклада.\nКроме того следует учесть:\n• каждый клиент обязательно имеет счет в банке. Каждый счет обязательно принадлежит клиенту;\n• вклад некоторого вида не обязательно может быть связан со счетами клиентов. Каждый счет клиента обязательно связан с некоторым видом вклада.", "Comments": [], "entities": [{"start_offset": 988, "end_offset": 998, "label": "integer"}, {"start_offset": 1000, "end_offset": 1019, "label": "string"}, {"start_offset": 1021, "end_offset": 1034, "label": "integer"}, {"start_offset": 1046, "end_offset": 1052, "label": "integer"}, {"start_offset": 1123, "end_offset": 1134, "label": "integer"}, {"start_offset": 1136, "end_offset": 1150, "label": "string"}, {"start_offset": 1152, "end_offset": 1166, "label": "integer"}, {"start_offset": 1168, "end_offset": 1173, "label": "string"}, {"start_offset": 1175, "end_offset": 1182, "label": "integer"}, {"start_offset": 1209, "end_offset": 1216, "label": "integer"}, {"start_offset": 1218, "end_offset": 1229, "label": "integer"}, {"start_offset": 1231, "end_offset": 1241, "label": "integer"}, {"start_offset": 1243, "end_offset": 1262, "label": "timestamp"}, {"start_offset": 1264, "end_offset": 1283, "label": "timestamp"}, {"start_offset": 1285, "end_offset": 1300, "label": "double"}]}
{"id": 1365, "text": "Сотрудники разных категорий (1-й, 2-й, 3-й) аудиторской фирмы осуществляют проверку предприятий в течение года. Работа сотрудников оплачивается за каждый час в зависимости от категории сотрудника. Необходимо спроектировать базу данных АУДИТ, информация которой будет использоваться для автоматизации начисления зарплаты сотрудникам.\nВ БД должна храниться информация:\n• о СОТРУДНИКАХ аудиторской фирмы: код сотрудника, Ф.И.О. сотрудника, номер паспорта, дата рождения, рабочий телефон;\n• КАТЕГОРИЯХ сотрудников: категория, ставка за 1 час (тыс. руб.);\n• выполненной сотрудниками РАБОТЕ на предприятиях: название предприятия, код сотрудника, дата выполнения работы, количество отработанных часов.\nПри проектировании БД необходимо учитывать следующее:\n• определенную категорию могут иметь несколько сотрудников. Сотрудник имеет квалификацию только одной категории;\n• сотрудник может выполнять несколько работ по проверке на разных предприятиях. Работу по проверке предприятия могут проводить несколько сотрудников.\nКроме того следует учесть:\n• каждый сотрудник обязательно имеет категорию. Определенная категория не обязательно может быть у сотрудников аудиторской фирмы;\n• сотрудник не обязательно выполняет работу по проверке на предприятии. Каждая работа по проверке на предприятии обязательно выполняется сотрудниками.", "Comments": [], "entities": [{"start_offset": 402, "end_offset": 416, "label": "integer"}, {"start_offset": 418, "end_offset": 435, "label": "string"}, {"start_offset": 437, "end_offset": 451, "label": "integer"}, {"start_offset": 453, "end_offset": 466, "label": "timestamp"}, {"start_offset": 468, "end_offset": 483, "label": "integer"}, {"start_offset": 511, "end_offset": 520, "label": "string"}, {"start_offset": 522, "end_offset": 537, "label": "double"}, {"start_offset": 602, "end_offset": 622, "label": "string"}, {"start_offset": 624, "end_offset": 638, "label": "integer"}, {"start_offset": 640, "end_offset": 662, "label": "timestamp"}, {"start_offset": 664, "end_offset": 693, "label": "integer"}]}
{"id": 1366, "text": "На склад готовой продукции фабрики по пошиву одежды в течение года поступают производимые ею товары разных моделей. Необходимо спроектировать базу данных ФАБРИКА, информация которой будет использоваться для учета готовой продукции, хранящейся на складе.\nВ БД должна храниться информация:\n• о видах ТОВАРА (пальто женское, костюм женский и др.): код товара, наименование товара;\n• МОДЕЛЯХ одежды, выпускаемой фабрикой: код модели, наименование модели, код товара, цена модели (тыс. руб.);\n• ПОСТУПЛЕНИЯХ на склад: код поступления, код модели, дата поступления модели товара, количество (шт.), кто принял товар.\nПри проектировании БД необходимо учитывать следующее:\n• товар имеет несколько моделей. Модель связана с одним товаром;\n• модель связана с несколькими поступлениями. Поступление связано с одной моделью товара.\nКроме того следует учесть:\n• каждый вид товар обязательно имеет модели. Каждая модель обязательно связана с определенным товаром;\n• модель обязательно связана с поступлениями на склад. Поступление обязательно связано с моделью товара.", "Comments": [], "entities": [{"start_offset": 345, "end_offset": 355, "label": "integer"}, {"start_offset": 357, "end_offset": 376, "label": "string"}, {"start_offset": 418, "end_offset": 428, "label": "integer"}, {"start_offset": 430, "end_offset": 449, "label": "string"}, {"start_offset": 451, "end_offset": 461, "label": "integer"}, {"start_offset": 463, "end_offset": 474, "label": "double"}, {"start_offset": 513, "end_offset": 528, "label": "integer"}, {"start_offset": 530, "end_offset": 540, "label": "integer"}, {"start_offset": 542, "end_offset": 572, "label": "timestamp"}, {"start_offset": 574, "end_offset": 585, "label": "integer"}, {"start_offset": 592, "end_offset": 608, "label": "string"}]}
{"id": 1367, "text": "Работники турагенства продают путевки путешествий по разным странам. В каждую страну организуются несколько маршрутов. По каждому маршруту указывается цель путешествия (отдых, экскурсия, лечение, шоп-тур, обучение и др.). Необходимо спроектировать базу данных ТУРАГЕНСТВО, информация которой позволит определять наиболее популярные маршруты за текущий год, отслеживать обращения клиентов и др.\nВ БД должна храниться информация:\n• о СТРАНАХ: код страны, название страны, стоимость визы (руб.);\n• МАРШРУТАХ: код страны, код маршрута, наименование маршрута;\n• ПРОДАЖАХ: код маршрута, цель путешествия, цена путевки (руб.), количество проданных путевок по маршруту, дата продажи.\nПри проектировании БД необходимо учитывать следующее:\n• в каждую страну организуются несколько маршрутов. Маршрут имеет отношение только к одной стране;\n• маршрут участвует в нескольких продажах. Продажа связана только с одним маршрутом.\nКроме того следует учесть:\n• по каждой стране обязательно организуется маршрут. Каждый маршрут обязательно имеет отношение к некоторой стране;\n• маршрут не обязательно может участвовать в продаже (может быть невостребован). Каждая продажа обязательно связана с одним маршрутом.", "Comments": [], "entities": [{"start_offset": 441, "end_offset": 451, "label": "integer"}, {"start_offset": 453, "end_offset": 468, "label": "string"}, {"start_offset": 470, "end_offset": 484, "label": "double"}, {"start_offset": 506, "end_offset": 516, "label": "integer"}, {"start_offset": 518, "end_offset": 530, "label": "integer"}, {"start_offset": 532, "end_offset": 553, "label": "string"}, {"start_offset": 567, "end_offset": 579, "label": "integer"}, {"start_offset": 581, "end_offset": 597, "label": "string"}, {"start_offset": 599, "end_offset": 611, "label": "double"}, {"start_offset": 620, "end_offset": 660, "label": "integer"}, {"start_offset": 662, "end_offset": 674, "label": "timestamp"}]}
{"id": 1368, "text": "Отделы крупного торгового дома ежедневно продают различные виды товаров и ведут учет сведений о проданных товарах. Необходимо спроектировать базу данных ТОРГОВЛЯ, информация которой будет использоваться для анализа выполнения плана реализации продукции в отделах; определения товаров, пользующихся наибольшим спросом и др.\nВ БД должна храниться информация:\n• об ОТДЕЛАХ: код отдела, наименование отдела, Ф.И.О. заведующего отделом, телефон, объем реализации в день (руб.);\n• ТОВАРАХ: артикул товара, наименование товара, единица измерения, розничная цена товара (руб.);\n• ПРОДАЖАХ: артикул товара, дата продажи, количество проданного товара.\nПри проектировании БД необходимо учитывать следующее:\n• отдел ежедневно осуществляет несколько продаж. Каждая продажа имеет отношение только к одному отделу;\n• товар участвует в нескольких продажах. Каждая продажа соотносится только с одним товаром.\nКроме того следует учесть:\n• каждый отдел обязательно осуществляет продажу. Каждая продажа обязательно осуществляется отделом;\n• товар не обязательно может участвовать в продаже (может быть невостребован). В продаже обязательно участвует товар.", "Comments": [], "entities": [{"start_offset": 371, "end_offset": 381, "label": "integer"}, {"start_offset": 383, "end_offset": 402, "label": "string"}, {"start_offset": 404, "end_offset": 430, "label": "string"}, {"start_offset": 432, "end_offset": 439, "label": "integer"}, {"start_offset": 441, "end_offset": 464, "label": "double"}, {"start_offset": 484, "end_offset": 498, "label": "integer"}, {"start_offset": 500, "end_offset": 519, "label": "string"}, {"start_offset": 521, "end_offset": 538, "label": "string"}, {"start_offset": 540, "end_offset": 561, "label": "double"}, {"start_offset": 582, "end_offset": 596, "label": "integer"}, {"start_offset": 598, "end_offset": 610, "label": "timestamp"}, {"start_offset": 612, "end_offset": 640, "label": "integer"}]}
{"id": 1369, "text": "Отделение Белпочты каждое полугодие осуществляет подписку граждан (в дальнейшем получателей) на различные издания (газеты, журналы) на один, три или шесть месяцев. Необходимо спроектировать базу данных ПОДПИСНЫЕ ИЗДАНИЯ, информация которой будет использоваться для учета получателей и выписанных ими изданий.\nВ БД должна храниться информация:\n• об ИЗДАНИЯХ, на которые можно оформить подписку: индекс издания, вид издания (газета, журнал), название издания, стоимость подписки на издание на 1 месяц (руб.);\n• получателях: код получателя, Ф.И.О. получателя, адрес получателя (улица, дом, квартира);\n• подписках, осуществленных получателями: код получателя, индекс издания, срок подписки (в месяцах), месяц начала доставки издания, год начала доставки издания.\nПри проектировании БД необходимо учитывать следующее:\n• получатель может осуществить подписку несколько раз (подписаться на несколько изданий). Каждая подписка осуществляется одним получателем;\n• издание может быть использовано для нескольких подписок (на издание могут подписаться несколько получателей). Каждая подписка соответствует одному изданию.\nКроме того следует учесть:\n• каждый получатель обязательно осуществляет хотя бы одну подписку. Каждая подписка обязательно соответствует получателю;\n• на издание не обязательно может быть подписка (оно может быть не востребовано). Подписка обязательно соответствует некоторому изданию.", "Comments": [], "entities": [{"start_offset": 394, "end_offset": 408, "label": "integer"}, {"start_offset": 410, "end_offset": 421, "label": "string"}, {"start_offset": 440, "end_offset": 456, "label": "string"}, {"start_offset": 458, "end_offset": 498, "label": "double"}, {"start_offset": 522, "end_offset": 536, "label": "integer"}, {"start_offset": 538, "end_offset": 555, "label": "string"}, {"start_offset": 557, "end_offset": 573, "label": "string"}, {"start_offset": 640, "end_offset": 654, "label": "integer"}, {"start_offset": 656, "end_offset": 670, "label": "integer"}, {"start_offset": 672, "end_offset": 685, "label": "integer"}, {"start_offset": 699, "end_offset": 728, "label": "integer"}, {"start_offset": 730, "end_offset": 757, "label": "integer"}]}
{"id": 1370, "text": "Библиотека располагает фондом книг, который постоянно пополняется. Книги, находящиеся в библиотеке, изданы различными издательствами. Каждый читатель может взять на абонемент не более пяти книг на срок до 20 дней. Необходимо спроектировать базу данных БИБЛИОТЕКА, информация которой будет использоваться для получения оперативной информации о наличии книг в библиотеке, наличии книг у читателя, для контроля своевременности возврата книг и др.\nВ БД должна храниться информация:\n• об ИЗДАТЕЛЬСТВАХ: код издательства, наименование издательства, город;\n• КНИГАХ: шифр книги, название книги, первый автор, год издания, цена книги (руб.), количество экземпляров (шт.);\n• ЧИТАТЕЛЯХ: код читателя, Ф.И.О. читателя, адрес, телефон;\n• ВЫДАЧАХ: код читателя, шифр книги, дата выдачи, роспись.\nПри проектировании БД необходимо учитывать следующее:\n• в фонде библиотеки могут храниться несколько книг одного и того же издательства. Книга издается только одним издательством;\n• книга может быть затребована несколько раз на выдачу. Каждая выдача относится к одной книге;\n• читатель может быть задействован в выдаче нескольких книг. Каждая выдача относится к одному читателю.\nКроме того следует учесть:\n• каждая книга, находящаяся в фонде библиотеки, обязательно издается издательством. Издательство обязательно издает книги;\n• книга не обязательно может быть затребована на выдачу. Каждая выдача обязательно связана с книгой;\n• каждый читатель обязательно задействован в выдаче. В каждой выдаче обязательно задействован читатель.", "Comments": [], "entities": [{"start_offset": 498, "end_offset": 514, "label": "integer"}, {"start_offset": 516, "end_offset": 541, "label": "string"}, {"start_offset": 543, "end_offset": 548, "label": "string"}, {"start_offset": 560, "end_offset": 570, "label": "string"}, {"start_offset": 572, "end_offset": 586, "label": "string"}, {"start_offset": 588, "end_offset": 600, "label": "string"}, {"start_offset": 602, "end_offset": 613, "label": "integer"}, {"start_offset": 615, "end_offset": 625, "label": "double"}, {"start_offset": 634, "end_offset": 656, "label": "integer"}, {"start_offset": 677, "end_offset": 689, "label": "integer"}, {"start_offset": 691, "end_offset": 706, "label": "string"}, {"start_offset": 708, "end_offset": 713, "label": "string"}, {"start_offset": 715, "end_offset": 722, "label": "integer"}, {"start_offset": 735, "end_offset": 747, "label": "integer"}, {"start_offset": 749, "end_offset": 759, "label": "string"}, {"start_offset": 761, "end_offset": 772, "label": "timestamp"}, {"start_offset": 774, "end_offset": 781, "label": "string"}]}
{"id": 1371, "text": "Хозрасчетная поликлиника оказывает различные медицинские услуги. Прием пациентов осуществляется врачами строго по талонам. Для врача каждой специальности определен набор талонов, используемый ежедневно. На каждого пациента заводится медицинская карта. Оплата услуги осуществляется после приема и постановки диагноза. Стоимость визита к врачу зависит от категории врача (1-я, 2-я, 3-я) и цели посещения: консультация, обследование, лечение и др. Некоторым пациентам предоставляется скидка на обслуживание. Необходимо спроектировать базу данных ПОЛИКЛИНИКА, информация которой позволит хранить сведения о заболеваниях пациентов, частоте их обращения, загрузке врачей, выручке от оказания медицинских услуг и др.\nВ БД должна храниться информация:\n• о ВРАЧАХ: Ф.И.О. врача, специальность, категория;\n• ПАЦИЕНТАХ: номер медкарты, Ф.И.О. пациента, дата рождения, адрес, пол, скидка на обслуживание (%);\n• ежедневном ПРИЕМЕ пациентов: номер талона на прием к врачу, дата визита, цель посещения, стоимость визита (руб.);\n• ДИАГНОЗАХ: код диагноза, наименование диагноза.\nПри проектировании БД необходимо учитывать следующее:\n• врач осуществляет по талонам ежедневно несколько приемов. Каждый прием осуществляется одним врачом;\n• пациент может приходить на прием к одному врачу несколько раз. На прием по талону приходит только один пациент;\n• один и тот же диагноз выставляется на приеме нескольким пациентам. На одном приеме выставляется один диагноз.\nКроме того следует учесть:\n• каждый врач обязательно принимает пациентов, которые взяли талон. Каждый прием обязательно осуществляется врачом;\n• каждый пациент обязательно приходит на прием по талону. На каждый прием обязательно приходит пациент;\n• возможный диагноз не обязательно выставляется на приеме (его может не быть у принятых врачом пациентов). На приеме обязательно выставляется диагноз.", "Comments": [], "entities": [{"start_offset": 756, "end_offset": 768, "label": "string"}, {"start_offset": 770, "end_offset": 783, "label": "string"}, {"start_offset": 785, "end_offset": 794, "label": "string"}, {"start_offset": 809, "end_offset": 823, "label": "integer"}, {"start_offset": 825, "end_offset": 840, "label": "string"}, {"start_offset": 842, "end_offset": 855, "label": "timestamp"}, {"start_offset": 857, "end_offset": 862, "label": "string"}, {"start_offset": 864, "end_offset": 867, "label": "string"}, {"start_offset": 869, "end_offset": 891, "label": "double"}, {"start_offset": 928, "end_offset": 957, "label": "integer"}, {"start_offset": 959, "end_offset": 970, "label": "timestamp"}, {"start_offset": 972, "end_offset": 986, "label": "string"}, {"start_offset": 988, "end_offset": 1004, "label": "double"}, {"start_offset": 1026, "end_offset": 1038, "label": "integer"}, {"start_offset": 1040, "end_offset": 1061, "label": "string"}]}
{"id": 1372, "text": "Работники цехов предприятия получают со скидкой спецодежду (халаты, тапочки, комбинезоны и др.) для выполнения производственных функций. Процент скидки зависит от занимаемой должности и может составлять от 30 до 50 % стоимости единицы вида спецодежды. Спецодежда имеет разный срок носки, по истечении которого она подлежит замене. Ежедневно кладовщик цеха ведет учет выдачи спецодежды. Необходимо спроектировать базу данных СПЕЦОДЕЖДА, информация которой будет использоваться для получения оперативных сведений о наличии спецодежды у работников; формирования списка работников, нуждающихся в замене спецодежды; планирования закупок спецодежды и др.\nВ БД должна храниться информация:\n• о СПЕЦОДЕЖДЕ: код спецодежды, вид спецодежды, срок носки, стоимость единицы (руб.);\n• ЦЕХАХ, работники которых пользуются различными видами спецодежды: код цеха, наименование цеха, Ф.И.О. начальника цеха;\n• РАБОТНИКАХ: код работника, Ф.И.О. работника, должность, скидка на спецодежду (%);\n• ПОЛУЧЕНИИ: код работника, код спецодежды, дата получения, роспись.\nПри проектировании БД необходимо учитывать следующее:\n• в цеху работают несколько работников. Работник работает только в одном цеху;\n• работник цеха участвует в получении нескольких видов спецодежды. Каждое получение имеет отношение только к одному работнику;\n• один и тот же вид спецодежды поступает несколько раз для получения. Каждое получение относится к одному виду спецодежды.\nКроме того следует учесть:\n• каждый работник обязательно работает в цеху. В каждом цехе обязательно работают работники;\n• работники некоторых должностей не обязательно участвуют в получении спецодежды. В каждом получении обязательно участвует работник;\n• каждый вид спецодежды обязательно поступает для получения. Каждое получение обязательно относится к некоторому виду спецодежду.", "Comments": [], "entities": [{"start_offset": 699, "end_offset": 713, "label": "integer"}, {"start_offset": 715, "end_offset": 729, "label": "string"}, {"start_offset": 731, "end_offset": 741, "label": "integer"}, {"start_offset": 743, "end_offset": 760, "label": "double"}, {"start_offset": 837, "end_offset": 845, "label": "integer"}, {"start_offset": 847, "end_offset": 864, "label": "string"}, {"start_offset": 866, "end_offset": 888, "label": "string"}, {"start_offset": 904, "end_offset": 917, "label": "integer"}, {"start_offset": 919, "end_offset": 935, "label": "string"}, {"start_offset": 937, "end_offset": 946, "label": "string"}, {"start_offset": 948, "end_offset": 968, "label": "double"}, {"start_offset": 987, "end_offset": 1000, "label": "integer"}, {"start_offset": 1002, "end_offset": 1016, "label": "integer"}, {"start_offset": 1018, "end_offset": 1032, "label": "timestamp"}, {"start_offset": 1034, "end_offset": 1041, "label": "string"}]}
{"id": 1373, "text": "ГАИ города производит регистрацию автомобилей. Инспектора дорожно-патрульной службы следят за безопасностью дорожного движения. В случае нарушения правил дорожного движения к водителям применяются меры взысканий. Виды нарушений и меры взысканий определяются Кодексом об административных правонарушениях. Необходимо спроектировать базу данных ГАИ, информация которой будет использоваться для подведения статистики совершаемых водителями нарушений правил дорожного движения; выявления водителей, многократно совершающих нарушения правил дорожного движения; определения наиболее аварийных районов города, размера штрафа за совершенное нарушение и др.\nВ БД должна храниться информация:\n• о водителях: номер водительского удостоверения, Ф.И.О., адрес, телефон;\n• АВТОМОБИЛЯХ: номер автомобиля, марка, модель, цвет, год выпуска, дата регистрации в ГАИ;\n• нарушениях правил дорожного движения: код нарушения, вид нарушения (превышение скорости, управление автомобилем в состоянии алкогольного опьянения и др.), штраф за нарушение (диапазон долей базовой величины. Например, штраф за превышение скорости составляет 0,5-10 базовых величин), предупреждение сделать или не сделать (Да/Нет, \"Да\" означает, что инспектор должен сделать водителю предупреждение за совершенное нарушение), срок лишения права управления автомобилем (диапазон месяцев. Например, срок за управление автомобилем в состоянии алкогольного опьянения составляет 12 – 36 месяцев);\n• взысканиях с водителей-нарушителей: код нарушения, дата и время нарушения, номер водительского удостоверения, район совершения нарушения, размер штрафа (доля базовой величины, определяемая инспектором по кодексу об административных правонарушениях), оплачен штраф или не оплачен (Да/Нет), срок лишения права управления автомобилем (количество месяцев, определяемое инспектором по Кодексу об административных правонарушениях), базовая величина (на дату совершения нарушения, тыс. руб.), личный номер инспектора ДПС, установившего нарушение.\nПри проектировании БД необходимо учитывать следующее:\n• водитель может иметь несколько автомобилей. Автомобиль принадлежит одному водителю;\n• водитель может получить несколько взысканий (он может совершить несколько нарушений). Взыскание применяется к одному водителю;\n• одному и тому же нарушению могут соответствовать несколько взысканий (взыскания к водителям могут применяться за один и тот же вид нарушения). Взысканию соответствует единственное нарушение.\nКроме того следует учесть:\n• каждый водитель обязательно имеет автомобиль (ГАИ хранит сведения только о тех водителях, которые зарегистрировали автомобиль). Каждый автомобиль обязательно принадлежит водителю (ГАИ хранит сведения только о зарегистрированных автомобилях);\n• водитель не обязательно получает взыскания (водитель может не совершить ни одного нарушения). Каждое взыскание обязательно применяется к водителю;\n• нарушению не обязательно соответствует взыскание (нарушение может ни разу никем не совершаться). Каждому взысканию обязательно соответствует нарушение.", "Comments": [], "entities": [{"start_offset": 697, "end_offset": 730, "label": "integer"}, {"start_offset": 732, "end_offset": 738, "label": "string"}, {"start_offset": 740, "end_offset": 745, "label": "string"}, {"start_offset": 747, "end_offset": 754, "label": "integer"}, {"start_offset": 771, "end_offset": 787, "label": "string"}, {"start_offset": 789, "end_offset": 794, "label": "string"}, {"start_offset": 796, "end_offset": 802, "label": "string"}, {"start_offset": 804, "end_offset": 808, "label": "string"}, {"start_offset": 810, "end_offset": 821, "label": "integer"}, {"start_offset": 823, "end_offset": 845, "label": "timestamp"}, {"start_offset": 887, "end_offset": 900, "label": "integer"}, {"start_offset": 902, "end_offset": 915, "label": "string"}, {"start_offset": 1004, "end_offset": 1022, "label": "double"}, {"start_offset": 1132, "end_offset": 1169, "label": "boolean"}, {"start_offset": 1274, "end_offset": 1315, "label": "integer"}, {"start_offset": 1478, "end_offset": 1491, "label": "integer"}, {"start_offset": 1493, "end_offset": 1515, "label": "timestamp"}, {"start_offset": 1517, "end_offset": 1550, "label": "integer"}, {"start_offset": 1552, "end_offset": 1578, "label": "string"}, {"start_offset": 1580, "end_offset": 1593, "label": "double"}, {"start_offset": 1692, "end_offset": 1720, "label": "boolean"}, {"start_offset": 1731, "end_offset": 1772, "label": "integer"}, {"start_offset": 1868, "end_offset": 1884, "label": "double"}, {"start_offset": 1928, "end_offset": 1955, "label": "integer"}]}
{"id": 1374, "text": "ЖЭС города производит начисления за коммунальные услуги. Тарифы, установленные на них, не меняются. Квартиросъемщики должны оплачивать коммунальные услуги до 15 числа каждого месяца. За несвоевременную оплату взимается пеня за каждый день просрочки в размере 0,1 % общей суммы, подлежащей оплате за месяц. Необходимо спроектировать базу данных ЖЭС, информация которой будет использоваться для выявления неплательщиков за коммунальные услуги, определения ежемесячной суммы оплаты квартиросъемщиками за коммунальные услуги, пени за несвоевременную оплату и др.\nВ БД должна храниться информация:\n• о КВАРТИРОСЪЕМЩИКАХ: лицевой счет, Ф.И.О., телефон;\n• КВАРТИРАХ: адрес (улица, дом, квартира), количество проживающих, площадь (м2);\n• услугах: код услуги, вид услуги (отопление, горячее водоснабжение, каналы ТВ и др.), единица измерения (гКал, м3, шт. и др.), тариф (руб.);\n• оплате за услугу: лицевой счет, код услуги, фактически расходовано, оплатить по дату (15.ММ.ГГ), оплачена своевременно или не своевременно (Да/Нет), дата оплаты (указывается в случае, если оплата произведена не своевременно).\nПри проектировании БД необходимо учитывать следующее:\n• квартиросъемщик снимает одну квартиру. Квартира имеет одного квартиросъемщика;\n• квартиросъемщик производит оплату за несколько услуг. Оплата за услугу производится одним квартиросъемщиком;\n• одна и та же услуга может быть связана с несколькими оплатами (она оплачивается квартиросъемщиками в разные месяцы). Оплата относится к одной услуге.\nКроме того следует учесть:\n• каждый квартиросъемщик обязательно снимает квартиру. Каждая квартира обязательно имеет квартиросъемщика;\n• каждый квартиросъемщик обязательно производит оплату за услугу. Оплата за каждую услугу обязательно производится квартиросъемщиком;\n• услуга не обязательно подлежит оплате (услуга может быть ни разу никому не оказана). Оплата за каждую услугу обязательна.", "Comments": [], "entities": [{"start_offset": 616, "end_offset": 628, "label": "integer"}, {"start_offset": 630, "end_offset": 636, "label": "string"}, {"start_offset": 638, "end_offset": 645, "label": "integer"}, {"start_offset": 660, "end_offset": 666, "label": "string"}, {"start_offset": 690, "end_offset": 712, "label": "integer"}, {"start_offset": 714, "end_offset": 722, "label": "integer"}, {"start_offset": 739, "end_offset": 749, "label": "integer"}, {"start_offset": 751, "end_offset": 761, "label": "string"}, {"start_offset": 815, "end_offset": 832, "label": "string"}, {"start_offset": 856, "end_offset": 862, "label": "double"}, {"start_offset": 890, "end_offset": 902, "label": "integer"}, {"start_offset": 904, "end_offset": 914, "label": "integer"}, {"start_offset": 916, "end_offset": 938, "label": "double"}, {"start_offset": 940, "end_offset": 957, "label": "timestamp"}, {"start_offset": 969, "end_offset": 1010, "label": "boolean"}, {"start_offset": 1021, "end_offset": 1032, "label": "timestamp"}]}
{"id": 1375, "text": "Предприятие общественного питания \"Бистро\" ежедневно занимается приготовлением различных блюд по заказам клиентов. Технология приготовления каждого блюда указана в рецепте на рис. 2.1.\nЗакуска \"Лобио по-грузински\" Состав: фасоль стручковая 200 г, лук зеленый 40 г, масло сливочное 30 г, зелень 10 г. Технология приготовления: ломаную очищенную фасоль, нашинкованный лук посолить, посыпать перцем и припустить в масле с небольшим количеством воды; добавить зелень и довести до готовности. Затем запечь в духовке. Выход – 210 г. Калорий – 725.\nРис. 2.1. Пример кулинарного рецепта\nЕжедневно собираются сведения о приготовленных блюдах. Необходимо спроектировать базу данных ОБЩЕПИТ, информация которой будет использоваться для приготовления блюд и анализа их калорийности, составления меню, определения расходов предприятия и др.\nВ БД должна храниться информация:\n• о блюдах, для описания которых нужны данные, входящие в их кулинарные рецепты: номер блюда, название блюда, вид блюда (закуска, суп, горячее и т.п.), выход (вес порции, г), изображение блюда;\n• ежедневном приготовлении блюд: номер блюда, количество порций, дата приготовления;\n• рецептах: номер блюда, время приготовления блюда (мин), технология приготовления;\n• продуктах, из которых приготавливаются блюда: код продукта, название продукта, калорийность (ккал в 100 г продукта), вес продукта (г), цена (руб. за 1 кг).\nПри проектировании БД необходимо учитывать следующее:\n• блюдо может состоять из нескольких продуктов. Продукт может входить в состав нескольких блюд;\n• у блюда может быть несколько приготовлений (оно может приготавливаться в разные дни в некотором количестве порций). Приготовление соотносится с одним блюдом;\n• блюдо имеет один рецепт. Рецепт соответствует одному блюду.\nКроме того следует учесть:\n• каждое блюдо обязательно состоит из одного или нескольких продуктов. Каждый продукт обязательно входит в состав одного или нескольких блюд;\n• блюдо не обязательно приготавливается (оно может быть не востребовано клиентами). Каждое приготовление обязательно соотносится с некоторым блюдом;\n• каждое блюдо обязательно имеет рецепт. Каждый рецепт обязательно соответствует некоторому блюду.", "Comments": [], "entities": [{"start_offset": 943, "end_offset": 954, "label": "integer"}, {"start_offset": 956, "end_offset": 970, "label": "string"}, {"start_offset": 972, "end_offset": 981, "label": "string"}, {"start_offset": 1014, "end_offset": 1020, "label": "integer"}, {"start_offset": 1037, "end_offset": 1054, "label": "string"}, {"start_offset": 1089, "end_offset": 1100, "label": "integer"}, {"start_offset": 1102, "end_offset": 1119, "label": "integer"}, {"start_offset": 1121, "end_offset": 1139, "label": "timestamp"}, {"start_offset": 1153, "end_offset": 1164, "label": "integer"}, {"start_offset": 1166, "end_offset": 1191, "label": "integer"}, {"start_offset": 1199, "end_offset": 1223, "label": "string"}, {"start_offset": 1273, "end_offset": 1285, "label": "integer"}, {"start_offset": 1287, "end_offset": 1304, "label": "string"}, {"start_offset": 1306, "end_offset": 1319, "label": "integer"}, {"start_offset": 1344, "end_offset": 1356, "label": "integer"}, {"start_offset": 1362, "end_offset": 1367, "label": "double"}]}
{"id": 1376, "text": "Интернет-магазины реализуют потребителям бытовую технику (утюги, электрочайники, кухонные комбайны и др.) разных моделей известных фирм-производителей (Philips, Bosh, Mulinex и др.). Заказы осуществляются клиентами в интернет-магазинах в любое время суток. После подтверждения заказа клиентом по телефону курьер доставляет ему товар по указанному адресу. Необходимо спроектировать базу данных Интернет-продажи, информация которой будет использоваться для анализа спроса потребителей на конкретные модели товаров разных производителей, динамики реализации товаров в интернет-магазинах за определенные интервалы времени, сравнения условий доставки товаров в разных магазинах и др.\nВ БД должна храниться информация:\n• об Интернет-магазинах: код магазина, электронный адрес, оплата доставки (Да/Нет);\n• Товарах: код товара, название товара, фирма, модель, технические характеристики, цена (руб.), гарантийный срок, изображение;\n• Заказах: код заказа, код магазина, код товара, дата заказа, время заказа, количество, Ф.И.О. клиента, контактный телефон, подтверждение заказа (Да/Нет);\n• Доставке: код заказа, дата доставки, время доставки, адрес доставки, Ф.И.О. клиента, Ф.И.О. курьера.\nПри проектировании БД необходимо учитывать следующее:\n• товар может продаваться в нескольких интернет-магазинах. Интернет-магазин может предлагать к продаже несколько товаров;\n• товар может быть связан с несколькими заказами. Заказ связан с одним товаром;\n• в интернет-магазине могут осуществляться несколько заказов. Заказ связан с одним интернет-магазином;\n• заказ подлежит одной доставке. Доставка связана с одним заказом.\nКроме того следует учесть:\n• каждый товар обязательно реализуется через интернет-магазины. Каждый интернет-магазин обязательно реализует товары;\n• товар не обязательно может быть заказан. Каждый заказ обязательно связан с товаром;\n• магазин не обязательно может иметь заказы. Каждый заказ обязательно связан с определенным интернет-магазином;\n• заказ не обязательно может быть доставлен. Каждая доставка товара обязательно связана с заказом.", "Comments": [], "entities": [{"start_offset": 738, "end_offset": 750, "label": "integer"}, {"start_offset": 752, "end_offset": 769, "label": "string"}, {"start_offset": 771, "end_offset": 786, "label": "boolean"}, {"start_offset": 808, "end_offset": 818, "label": "integer"}, {"start_offset": 820, "end_offset": 835, "label": "string"}, {"start_offset": 837, "end_offset": 842, "label": "string"}, {"start_offset": 844, "end_offset": 850, "label": "string"}, {"start_offset": 852, "end_offset": 878, "label": "string"}, {"start_offset": 880, "end_offset": 885, "label": "double"}, {"start_offset": 893, "end_offset": 909, "label": "integer"}, {"start_offset": 911, "end_offset": 922, "label": "string"}, {"start_offset": 935, "end_offset": 945, "label": "integer"}, {"start_offset": 947, "end_offset": 959, "label": "integer"}, {"start_offset": 961, "end_offset": 971, "label": "integer"}, {"start_offset": 973, "end_offset": 984, "label": "timestamp"}, {"start_offset": 986, "end_offset": 998, "label": "timestamp"}, {"start_offset": 1000, "end_offset": 1010, "label": "integer"}, {"start_offset": 1012, "end_offset": 1026, "label": "string"}, {"start_offset": 1028, "end_offset": 1046, "label": "integer"}, {"start_offset": 1048, "end_offset": 1068, "label": "boolean"}, {"start_offset": 1091, "end_offset": 1101, "label": "integer"}, {"start_offset": 1103, "end_offset": 1116, "label": "timestamp"}, {"start_offset": 1118, "end_offset": 1132, "label": "timestamp"}, {"start_offset": 1134, "end_offset": 1148, "label": "string"}, {"start_offset": 1150, "end_offset": 1164, "label": "string"}, {"start_offset": 1166, "end_offset": 1180, "label": "string"}]}
{"id": 1377, "text": "Банки предоставляют возможность своим клиентам осуществлять безналичные расчеты с помощью эмитируемых ими пластиковых карт и обналичивать деньги в банкоматах. Каждый банк обслуживает свои банкоматы и своих клиентов по вопросам эксплуатации эмитируемых им пластиковых карт. Если карточка клиента эмитирована банком, обслуживающим банкомат, то операция выдачи наличных денег банкоматом клиенту осуществляется бесплатно. Если же клиент некоторого банка обналичивает деньги в банкомате другого банка, то банкомат снимает комиссию (1,2 % суммы выдачи). Клиенты осуществляют операции обналичивания денег в любое время суток и в любом банкомате.\nНеобходимо спроектировать базу данных Банкоматы, информация которой будет использоваться для анализа операций обналичивания денег клиентами в банкоматах разных банков, частоты обслуживания банкоматами клиентов с взыманием комиссионных вознаграждений, динамики операций обналичивания денег клиентами отдельных банков в разных банкоматах за определенные интервалы времени и др.\nВ БД должна храниться информация:\n• о Банках: код банка, название банка, юридический адрес;\n• Банкоматах: номер банкомата, адрес банкомата, код банка (обслуживающего банкомат);\n• Клиентах: номер карточки клиента, Ф.И.О. клиента, адрес клиента, код банка (обслуживающего клиента);\n• Операциях выдачи наличных денег клиентам: номер карточки клиента, номер банкомата, дата, время, комиссия (Да/Нет), сумма выдачи (руб.)\nПри проектировании БД необходимо учитывать следующее:\n• банк обслуживает несколько банкоматов. Банкомат обслуживается одним банком;\n• банк обслуживает несколько клиентов. Клиент обслуживается одним банком;\n• банкомат обслуживает несколько клиентов. Клиент обслуживается несколькими банкоматами;\n• банкомат осуществляет несколько операций обналичивания денег. Операция обналичивания денег связана с одним банкоматом;\n• клиент осуществляет несколько операций обналичивания денег. Операция обналичивания денег связана с одним клиентом.\nКроме того следует учесть:\n• каждый банк обязательно имеет в обслуживании банкоматы. Каждый банкомат обязательно обслуживается банком;\n• каждый банк обязательно имеет клиентов. Каждый клиент обязательно обслуживается банком;\n• каждый банкомат обязательно обслуживает клиентов. Каждый клиент обязательно обслуживается банкоматами;\n• банкомат не обязательно осуществляет постоянно операции выдачи наличных денег. Каждая операция выдачи наличных денег обязательно связана с банкоматом;\n• клиент не обязательно осуществляет операции обналичивания денег. Каждая операция обналичивания денег обязательно связана с клиентом.", "Comments": [], "entities": [{"start_offset": 1061, "end_offset": 1070, "label": "integer"}, {"start_offset": 1072, "end_offset": 1086, "label": "string"}, {"start_offset": 1088, "end_offset": 1105, "label": "string"}, {"start_offset": 1121, "end_offset": 1136, "label": "integer"}, {"start_offset": 1138, "end_offset": 1153, "label": "string"}, {"start_offset": 1155, "end_offset": 1164, "label": "integer"}, {"start_offset": 1204, "end_offset": 1226, "label": "integer"}, {"start_offset": 1228, "end_offset": 1242, "label": "string"}, {"start_offset": 1244, "end_offset": 1257, "label": "string"}, {"start_offset": 1259, "end_offset": 1268, "label": "integer"}, {"start_offset": 1339, "end_offset": 1361, "label": "integer"}, {"start_offset": 1363, "end_offset": 1378, "label": "integer"}, {"start_offset": 1380, "end_offset": 1384, "label": "timestamp"}, {"start_offset": 1386, "end_offset": 1391, "label": "timestamp"}, {"start_offset": 1393, "end_offset": 1401, "label": "boolean"}, {"start_offset": 1412, "end_offset": 1424, "label": "double"}]}
{"id": 1378, "text": "Сервисный центр осуществляет ремонт и гарантийное обслуживание бытовой техники фирм-производителей Philips, Brown, Bosh. Клиенты осуществляют заказы на ремонт товаров по гарантии и без нее. Сотрудники центра специализируются на ремонте и обслуживании отдельных товаров и выполняют соответствующие заказы. В день исполнения заказа сервисный центр сообщает об этом клиенту. Срок бесплатного хранения отремонтированного изделия в сервисном центре составляет один месяц. После его истечения клиент лишается права бесплатного гарантийного ремонта изделия и оплачивает затраты центра на хранение данного товара (5 % стоимости ремонта за каждый дополнительный день).\nНеобходимо спроектировать базу данных РЕМОНТ БЫТОВОЙ ТЕХНИКИ, информация которой будет использоваться для учета услуг по ремонту и гарантийному обслуживанию товаров, анализа сроков исполнения заказов, видов неисправностей и др.\nВ БД должна храниться информация:\n• о товарах: код товара, наименование товара, фирма, модель, технические характеристики, гарантийный срок, изображение;\n• сотрудниках: код сотрудника, Ф.И.О. сотрудника, должность;\n• заказах: код заказа, Ф.И.О. клиента, код товара, гарантия (Да/Нет), дата поступления заказа, телефон клиента;\n• исполнениях заказов: код заказа, вид ремонта, стоимость ремонта, дата исполнения заказа, сообщение клиенту (Да/Нет), дата получения товара, сумма оплаты услуг (руб.).\nПри проектировании БД необходимо учитывать следующее:\n• товар может быть отремонтирован несколькими сотрудниками. Сотрудник может выполнять ремонт нескольких товаров;\n• товар может быть связан с несколькими заказами. Заказ связан с одним товаром;\n• заказ соотносится с одним исполнением. Исполнение связано с одним заказом;\n• сотрудник осуществляет несколько исполнений заказов. Исполнение заказа связано с одним сотрудником.\nКроме того следует учесть:\n• каждый товар обязательно может быть отремонтирован сотрудниками. Каждый сотрудник обязательно выполняет ремонт товаров;\n• товар не обязательно может быть связан с заказами. Каждый заказ обязательно связан с товаром;\n• заказ не обязательно подлежит исполнению. Исполнение обязательно связано с заказом;\n• сотрудник не обязательно осуществляет исполнения заказов. Каждое исполнение заказа обязательно связано с сотрудником.", "Comments": [], "entities": [{"start_offset": 935, "end_offset": 945, "label": "integer"}, {"start_offset": 947, "end_offset": 966, "label": "string"}, {"start_offset": 968, "end_offset": 973, "label": "string"}, {"start_offset": 975, "end_offset": 981, "label": "string"}, {"start_offset": 983, "end_offset": 1009, "label": "string"}, {"start_offset": 1011, "end_offset": 1027, "label": "integer"}, {"start_offset": 1029, "end_offset": 1040, "label": "string"}, {"start_offset": 1057, "end_offset": 1071, "label": "integer"}, {"start_offset": 1073, "end_offset": 1090, "label": "string"}, {"start_offset": 1092, "end_offset": 1101, "label": "string"}, {"start_offset": 1114, "end_offset": 1124, "label": "integer"}, {"start_offset": 1126, "end_offset": 1140, "label": "string"}, {"start_offset": 1142, "end_offset": 1152, "label": "integer"}, {"start_offset": 1154, "end_offset": 1163, "label": "boolean"}, {"start_offset": 1173, "end_offset": 1196, "label": "timestamp"}, {"start_offset": 1198, "end_offset": 1213, "label": "integer"}, {"start_offset": 1238, "end_offset": 1248, "label": "integer"}, {"start_offset": 1250, "end_offset": 1261, "label": "string"}, {"start_offset": 1263, "end_offset": 1280, "label": "double"}, {"start_offset": 1282, "end_offset": 1304, "label": "timestamp"}, {"start_offset": 1306, "end_offset": 1323, "label": "boolean"}, {"start_offset": 1334, "end_offset": 1355, "label": "timestamp"}, {"start_offset": 1357, "end_offset": 1375, "label": "double"}]}
{"id": 1379, "text": "Фирма специализируется на продаже офисной мебели разных видов заказчикам – школам, техникумам, вузам, фирмам, предприятиям, организациям. Это компьютерные столы различных моделей (СК-1, СК-2 и др.), тумбы (Т-1, Т-2 и др.), шкафы (Ш-1, Ш-2 и др.). Необходимо спроектировать базу данных МЕБЕЛЬ, информация которой будет использоваться для учета продаж мебели.\nВ БД должна храниться информация:\n• о моделях мебели: название мебели, модель, характеристики модели, стоимость модели;\n• покупателях: код покупателя, название покупателя, адрес покупателя, телефон покупателя;\n• договорах на продажу мебели: номер договора, код покупателя, дата оформления договора, дата исполнения договора;\n• продажах: номер договора, название мебели, модель, количество (шт.).\nПри проектировании БД необходимо учитывать следующее:\n• покупатель может заключить несколько договоров. Договор заключается одним заказчиком;\n• модель может быть связана с несколькими продажами (по разным договорам). Продажа имеет отношение к одной модели;\n• по договору могут быть проданы несколько моделей мебели. Каждая продажа имеет отношение к одному договору.\nКроме того следует учесть:\n• каждый покупатель обязательно заключает договор. Каждый договор обязательно имеет отношение к покупателю;\n• модель мебели не обязательно может быть продана (может не иметь спроса). Каждая продажа обязательно соответствует некоторой модели мебели;\n• каждому договору обязательно соответствует хотя бы одна продажа. Каждая продажа обязательно соответствует некоторому договору.", "Comments": [], "entities": [{"start_offset": 412, "end_offset": 427, "label": "string"}, {"start_offset": 429, "end_offset": 435, "label": "string"}, {"start_offset": 437, "end_offset": 458, "label": "string"}, {"start_offset": 460, "end_offset": 476, "label": "double"}, {"start_offset": 493, "end_offset": 507, "label": "integer"}, {"start_offset": 509, "end_offset": 528, "label": "string"}, {"start_offset": 530, "end_offset": 546, "label": "string"}, {"start_offset": 548, "end_offset": 566, "label": "integer"}, {"start_offset": 599, "end_offset": 613, "label": "integer"}, {"start_offset": 615, "end_offset": 629, "label": "integer"}, {"start_offset": 631, "end_offset": 655, "label": "timestamp"}, {"start_offset": 657, "end_offset": 681, "label": "timestamp"}, {"start_offset": 695, "end_offset": 709, "label": "integer"}, {"start_offset": 711, "end_offset": 726, "label": "string"}, {"start_offset": 728, "end_offset": 734, "label": "string"}, {"start_offset": 736, "end_offset": 747, "label": "integer"}]}
{"id": 1380, "text": "Типография изготавливает полиграфическую продукцию различного рода: визитки, календари, буклеты и др. Необходимо спроектировать базу данных ТИПОГРАФИЯ, информация которой будет использоваться для учета заказов на изготовление полиграфической продукции.\nВ БД должна храниться информация:\n• о цехах типографии: номер цеха, название цеха, начальник цеха, телефон цеха;\n• продукции: код продукции, название продукции, номер цеха, стоимость единицы печатной продукции (руб.);\n• договорах на изготовление полиграфической продукции: номер договора, название заказчика, адрес заказчика, дата оформления договора, дата выполнения договора;\n• заказах: номер договора, код продукции, количество продукции (шт.).\nПри проектировании БД необходимо учитывать следующее:\n• в цехе могут изготавливаться несколько видов печатной продукции. Каждый вид печатной продукции изготавливается только одним цехом;\n• каждый вид печатной продукции может быть заказан несколько раз (по разным договорам). Заказ соответствует одному виду продукции;\n• договору могут соответствовать несколько заказов. Заказ имеет отношение к одному договору.\nКроме того следует учесть:\n• каждый цех обязательно изготавливает хотя бы один вид продукции. Каждый вид продукции обязательно изготавливается в некотором цехе;\n• продукция некоторого вида не обязательно может быть заказана (может не иметь спроса). Каждый заказ обязательно соответствует продукции некоторого вида;\n• каждому договору обязательно соответствует хотя бы один заказ. Каждый заказ обязательно имеет отношение к некоторому договору.", "Comments": [], "entities": [{"start_offset": 309, "end_offset": 319, "label": "integer"}, {"start_offset": 321, "end_offset": 334, "label": "string"}, {"start_offset": 336, "end_offset": 350, "label": "string"}, {"start_offset": 352, "end_offset": 364, "label": "integer"}, {"start_offset": 379, "end_offset": 392, "label": "integer"}, {"start_offset": 394, "end_offset": 412, "label": "string"}, {"start_offset": 414, "end_offset": 424, "label": "integer"}, {"start_offset": 426, "end_offset": 462, "label": "double"}, {"start_offset": 526, "end_offset": 540, "label": "integer"}, {"start_offset": 542, "end_offset": 560, "label": "string"}, {"start_offset": 562, "end_offset": 577, "label": "string"}, {"start_offset": 579, "end_offset": 603, "label": "timestamp"}, {"start_offset": 605, "end_offset": 629, "label": "timestamp"}, {"start_offset": 642, "end_offset": 656, "label": "integer"}, {"start_offset": 658, "end_offset": 671, "label": "integer"}, {"start_offset": 673, "end_offset": 693, "label": "integer"}]}
{"id": 1381, "text": "Аптечный склад РУП \"БелФармация\" осуществляет оптовую продажу лекарственных препаратов различным аптекам республики. Необходимо спроектировать базу данных АПТЕЧНЫЙ СКЛАД, информация которой будет использоваться для учета продаж аптекам лекарственных препаратов.\nВ БД должна храниться информация:\n• о лекарствах: код лекарства, название лекарства, производитель, цена (руб.);\n• аптеках: номер аптеки, название аптеки, адрес аптеки, номер телефона;\n• заявках: номер заявки, дата составления заявки, номер аптеки, дата выполнения заявки;\n• закупках лекарственных препаратов: номер заявки, код лекарства, количество (шт.).\nПри проектировании БД необходимо учитывать следующее:\n• аптека может составить несколько заявок. Заявка имеет отношение к одной аптеке;\n• лекарство может иметь отношение к нескольким закупкам. Закупка соответствует одному лекарству;\n• заявке могут соответствовать несколько закупок. Закупка соответствует одной заявке.\nКроме того следует учесть:\n• каждая аптека обязательно составляет хотя бы одну заявку. Каждая заявка обязательно имеет отношение к некоторой аптеке;\n• лекарство не обязательно может входить в закупку. Каждая закупка обязательно соответствует лекарству;\n• каждой заявке обязательно соответствует хотя бы одна закупка. Каждая закупка обязательно имеет отношение к заявке.", "Comments": [], "entities": [{"start_offset": 312, "end_offset": 325, "label": "integer"}, {"start_offset": 327, "end_offset": 345, "label": "string"}, {"start_offset": 347, "end_offset": 360, "label": "string"}, {"start_offset": 362, "end_offset": 367, "label": "double"}, {"start_offset": 386, "end_offset": 398, "label": "integer"}, {"start_offset": 400, "end_offset": 415, "label": "string"}, {"start_offset": 417, "end_offset": 429, "label": "string"}, {"start_offset": 431, "end_offset": 445, "label": "integer"}, {"start_offset": 458, "end_offset": 470, "label": "integer"}, {"start_offset": 472, "end_offset": 495, "label": "timestamp"}, {"start_offset": 497, "end_offset": 509, "label": "integer"}, {"start_offset": 511, "end_offset": 533, "label": "timestamp"}, {"start_offset": 572, "end_offset": 584, "label": "integer"}, {"start_offset": 586, "end_offset": 599, "label": "integer"}, {"start_offset": 601, "end_offset": 612, "label": "integer"}]}
{"id": 1382, "text": "В пункте обмена валюты ежедневно производится купля-продажа валюты. При совершении сделки покупается или продается валюта. Курс купли-продажи устанавливается Национальным банком республики. Необходимо спроектировать БД ПУНКТ ОБМЕНА ВАЛЮТЫ, которая должна обеспечивать хранение, поиск, анализ данных о сделках, совершенных в пункте обмена, и др.\nВ БД должна храниться информация:\n• о КЛИЕНТЕ: номер клиента, Ф.И.О. клиента, номер паспорта;\n• СДЕЛКЕ: код проданной валюты, код купленной валюты, номер кассира, номер клиента, дата сделки, время сделки, сумма проданной валюты, сумма купленной валюты;\n• ВАЛЮТЕ: код валюты, название валюты, курс продажи, курс покупки;\n• КАССИРЕ: номер кассира, Ф.И.О. кассира.\nПри проектировании БД необходимо учитывать следующее:\n• клиент может совершать несколько сделок. Сделка совершается одним клиентом;\n• любая валюта покупается (продается) при нескольких сделках. Сделка связана с одной валютой.\n• кассир обслуживает много сделок. Сделка совершается одним кассиром.\nКроме того следует учесть:\n• каждая сделка обязательно совершается клиентом. Клиент не обязательно совершает сделку (его может не устраивать курс валюты);\n• каждая сделка обязательно совершается при продаже (покупке) валюты. При совершении сделки обязательно продается или покупается валюта;\n• каждая сделка обязательно обслуживается кассиром. Кассир не обязательно обслуживает сделку (например, он только что принят на работу).", "Comments": [], "entities": [{"start_offset": 392, "end_offset": 405, "label": "integer"}, {"start_offset": 407, "end_offset": 421, "label": "string"}, {"start_offset": 423, "end_offset": 437, "label": "integer"}, {"start_offset": 449, "end_offset": 469, "label": "integer"}, {"start_offset": 471, "end_offset": 491, "label": "integer"}, {"start_offset": 493, "end_offset": 506, "label": "integer"}, {"start_offset": 508, "end_offset": 521, "label": "integer"}, {"start_offset": 523, "end_offset": 534, "label": "timestamp"}, {"start_offset": 536, "end_offset": 548, "label": "timestamp"}, {"start_offset": 550, "end_offset": 572, "label": "double"}, {"start_offset": 574, "end_offset": 596, "label": "double"}, {"start_offset": 608, "end_offset": 618, "label": "integer"}, {"start_offset": 620, "end_offset": 635, "label": "string"}, {"start_offset": 637, "end_offset": 649, "label": "double"}, {"start_offset": 651, "end_offset": 663, "label": "double"}, {"start_offset": 676, "end_offset": 689, "label": "integer"}, {"start_offset": 691, "end_offset": 705, "label": "string"}]}
{"id": 1383, "text": "Сотрудники научно-производственного предприятия \"Новые аналитические системы\" занимаются разработкой и поставкой программного обеспечения для разных организаций. Программное обеспечение позволяет управлять аналитическим оборудованием следующих типов: аналого-цифровым преобразователем (АЦП) NM с АМ1, АЦП NM без усилителя, АЦП NM с U2, АЦП NM с АМ2, АЦП NM с АМ1. При поставке программного обеспечения заключается договор с организацией. Если заключается договор на поставку программного обеспечения, которое разработал сотрудник, то он поощряется премией.\nНеобходимо спроектировать БД НАУЧНО-ПРОИЗВОДСТВЕННОЕ ПРЕДПРИЯТИЕ, информация которой будет использоваться для хранения данных о поставках программного обеспечения; организациях, в которые выполнены поставки; анализа деятельности сотрудников научно-производственного предприятия и др.\nВ БД должна храниться информация:\n• о СОТРУДНИКАХ: код сотрудника, код отдела, Ф.И.О. сотрудника, должность, оклад, премия;\n• ПОСТАВКАХ: номер договора, тип оборудования, комментарий пользователя о работе программного обеспечения (может отсутствовать);\n• ДОГОВОРАХ: номер договора; наименование организации, с которой заключен договор; дата заключения договора; код сотрудника;\n• ОРГАНИЗАЦИЯХ: код страны, город, адрес, телефон, e-mail, адрес web-сайта (может отсутствовать).\nПри проектировании БД необходимо учитывать следующее:\n• сотрудник заключает несколько договоров с разными организациями на поставку программного обеспечения. Договор на поставку программного обеспечения заключает один сотрудник предприятия;\n• поставка программного обеспечения предусматривает заключение одного договора. Договор соответствует одной поставке;\n• договор заключается с одной организацией. Организация заключает один договор.\nКроме того следует учесть:\n• сотрудник предприятия не обязательно заключают договор на поставку программного обеспечения (не устраивает договорная цена и др.). Каждый договор обязательно заключается сотрудником;\n• каждый договор обязательно заключается при поставке программного обеспечения различным организациям. Каждая поставка обязательно предусматривает заключение договора;\n• каждая поставка программного обеспечения обязательно производится организациям. Каждой организации обязательно соответствует поставка программного обеспечения.", "Comments": [], "entities": [{"start_offset": 892, "end_offset": 906, "label": "integer"}, {"start_offset": 908, "end_offset": 918, "label": "integer"}, {"start_offset": 920, "end_offset": 937, "label": "string"}, {"start_offset": 939, "end_offset": 948, "label": "string"}, {"start_offset": 950, "end_offset": 955, "label": "double"}, {"start_offset": 957, "end_offset": 963, "label": "double"}, {"start_offset": 978, "end_offset": 992, "label": "integer"}, {"start_offset": 994, "end_offset": 1010, "label": "string"}, {"start_offset": 1012, "end_offset": 1070, "label": "string"}, {"start_offset": 1107, "end_offset": 1121, "label": "integer"}, {"start_offset": 1123, "end_offset": 1147, "label": "string"}, {"start_offset": 1177, "end_offset": 1201, "label": "timestamp"}, {"start_offset": 1203, "end_offset": 1217, "label": "integer"}, {"start_offset": 1235, "end_offset": 1245, "label": "integer"}, {"start_offset": 1247, "end_offset": 1252, "label": "string"}, {"start_offset": 1254, "end_offset": 1259, "label": "string"}, {"start_offset": 1261, "end_offset": 1268, "label": "integer"}, {"start_offset": 1270, "end_offset": 1276, "label": "string"}, {"start_offset": 1278, "end_offset": 1293, "label": "string"}]}
{"id": 1384, "text": "Абонемент библиотеки производит выдачу книг читателям и прием книг в библиотеку от читателей. В библиотеке ведутся тематические каталоги. В тематическом каталоге отображается перечень тем, относящихся к одной области знаний. Необходимо спроектировать базу данных АБОНЕМЕНТ БИБЛИОТЕКИ, которая должнаобеспечивать хранение данных о выдаче и возврате книг в библиотеку; анализе данных о должниках библиотеки и книгах, популярных среди читателей, и др.\nВ БД должна храниться информация:\n• о КНИГАХ: шифр книги, ее название, первый автор, издательство, место издания, год издания, количество страниц, цена (руб.);\n• ЭКЗЕМПЛЯРАХ: шифр книги; инвентарный номер; дата выдачи; дата возврата;\n• ЧИТАТЕЛЯХ: номер читательского билета, Ф.И.О. читателя, дата рождения, телефон;\n• ТЕМАТИЧЕСКИХ КАТАЛОГАХ, где содержатся данные о кодах тем и наименованиях тем.\nПри проектировании БД необходимо учитывать следующее:\n• читатель одновременно работает с несколькими экземплярами. С одним экземпляром может работать только один читатель;\n• книга имеется в библиотеке в нескольких экземплярах. Экземпляр соответствует одной книге;\n• книга может содержаться в нескольких тематических каталогах. В тематическом каталоге содержатся сведения о нескольких книгах.\nКроме того следует учесть:\n• читатель не обязательно работает с книгой (отсутствует необходимая литература и др.). Книга не обязательно востребуется читателем;\n• каждая книга обязательно имеет экземпляр. Каждый экземпляр обязательно соответствует книге;\n• каждая книга обязательно содержится в тематическом каталоге. Каждый тематический каталог обязательно содержит сведения о книге.", "Comments": [], "entities": [{"start_offset": 495, "end_offset": 505, "label": "string"}, {"start_offset": 510, "end_offset": 518, "label": "string"}, {"start_offset": 520, "end_offset": 532, "label": "string"}, {"start_offset": 534, "end_offset": 546, "label": "string"}, {"start_offset": 548, "end_offset": 561, "label": "string"}, {"start_offset": 563, "end_offset": 574, "label": "integer"}, {"start_offset": 576, "end_offset": 594, "label": "integer"}, {"start_offset": 596, "end_offset": 601, "label": "double"}, {"start_offset": 624, "end_offset": 634, "label": "string"}, {"start_offset": 636, "end_offset": 653, "label": "integer"}, {"start_offset": 655, "end_offset": 666, "label": "timestamp"}, {"start_offset": 668, "end_offset": 681, "label": "timestamp"}, {"start_offset": 696, "end_offset": 722, "label": "integer"}, {"start_offset": 724, "end_offset": 739, "label": "string"}, {"start_offset": 741, "end_offset": 754, "label": "timestamp"}, {"start_offset": 756, "end_offset": 763, "label": "integer"}, {"start_offset": 815, "end_offset": 824, "label": "integer"}, {"start_offset": 827, "end_offset": 844, "label": "string"}]}
{"id": 1385, "text": "Коммерческие фирмы (Авто, Атлант-М и др.) занимаются поставкой различных моделей автомобилей. Модель имеет свои технические характеристики и может быть отгружена нескольким клиентам. Необходимо спроектировать базу данных КОММЕРЧЕСКАЯ ФИРМА, котораядолжна обеспечивать хранение и поиск данных о наличии необходимых моделей автомобилей; сделках, совершаемых сотрудниками фирмы; выявлять модели автомобилей, пользующихся наибольшим спросом у клиентов, и др.\nВ БД должна храниться информация:\n• о ПОСТАВЩИКАХ: код фирмы, название фирмы, телефон, e-mail, адрес web-сайта (может отсутствовать);\n• МОДЕЛЯХ: код модели, наименование модели, цвет, обивка, мощность двигателя (например, 100/139 кВт), количество дверей, коробка передач (ручная или автоматическая);\n• КЛИЕНТАХ: Ф.И.О. клиента, телефон, адрес, код модели;\n• ПРЕЙСКУРАНТЕ ЦЕН: код модели, год выпуска, цена (у.е.), предпродажная подготовка (стоимость услуг по подготовке к продаже, у.е.), транспортные издержки (у.е.);\n• ПРОДАЖАХ: номер договора, код модели, номер клиента, дата покупки.\nПри проектировании БД необходимо учитывать следующее:\n• поставщик предлагает несколько моделей автомобилей. Модель автомобиля может быть предложена нескольким поставщикам;\n• модель автомобиля соответствует одному прейскуранту цен. Прейскурант цен соответствует только одной модели;\n• клиент покупает несколько моделей автомобилей. Модель покупают несколько клиентов;\n• продажа совершается одному клиенту, клиент может совершить несколько покупок.\nКроме того следует учесть:\n• каждый поставщик обязательно предлагает модели автомобилей. Каждая модель обязательно предлагается поставщиком;\n• модель автомобиля не обязательно покупается клиентом (не понравился цвет модели и т.д.). Клиент не обязательно покупает модель (не устраивают технические характеристики автомобиля);\n• каждая модель автомобиля обязательно имеет прейскурант цен. Каждый прейскурант цен обязательно соответствует модели автомобиля.", "Comments": [], "entities": [{"start_offset": 506, "end_offset": 515, "label": "integer"}, {"start_offset": 517, "end_offset": 531, "label": "string"}, {"start_offset": 533, "end_offset": 540, "label": "integer"}, {"start_offset": 542, "end_offset": 548, "label": "string"}, {"start_offset": 550, "end_offset": 565, "label": "string"}, {"start_offset": 600, "end_offset": 610, "label": "integer"}, {"start_offset": 612, "end_offset": 631, "label": "string"}, {"start_offset": 633, "end_offset": 637, "label": "string"}, {"start_offset": 639, "end_offset": 645, "label": "string"}, {"start_offset": 647, "end_offset": 665, "label": "string"}, {"start_offset": 691, "end_offset": 708, "label": "integer"}, {"start_offset": 710, "end_offset": 725, "label": "string"}, {"start_offset": 767, "end_offset": 781, "label": "string"}, {"start_offset": 783, "end_offset": 790, "label": "integer"}, {"start_offset": 792, "end_offset": 797, "label": "string"}, {"start_offset": 799, "end_offset": 809, "label": "integer"}, {"start_offset": 831, "end_offset": 841, "label": "integer"}, {"start_offset": 843, "end_offset": 854, "label": "integer"}, {"start_offset": 856, "end_offset": 861, "label": "double"}, {"start_offset": 869, "end_offset": 893, "label": "double"}, {"start_offset": 943, "end_offset": 964, "label": "double"}, {"start_offset": 985, "end_offset": 999, "label": "integer"}, {"start_offset": 1001, "end_offset": 1011, "label": "integer"}, {"start_offset": 1013, "end_offset": 1026, "label": "integer"}, {"start_offset": 1028, "end_offset": 1040, "label": "timestamp"}]}
{"id": 1386, "text": "Студенты высших учебных заведений на последнем курсе сдают госэкзамены (количество варьируется в зависимости от вуза), пишут и защищают дипломную работу. При написании дипломной работы выбирают тему дипломной работы и руководителя. Необходимо спроектировать базу данных ДИПЛОМНЫЙ ПРОЕКТ, информация которой будет использоваться для хранения и поиска данных о научных темах, которые предложены студентам-дипломникам, успеваемости студентов и др.\nВ БД должна храниться информация:\n• о СТУДЕНТАХ: номер зачетной книжки, Ф.И.О. студента, факультет, группа;\n• ТЕМАХ: код преподавателя, тема дипломной работы;\n• ОТМЕТКАХ: номер зачетной книжки; оценка, полученная на госэкзамене, оценка, полученная на защите дипломной работы;\n• ПРЕПОДАВАТЕЛЯХ: код преподавателя, Ф.И.О. преподавателя, степень, звание, кафедра, телефон, e-mail.\nПри проектировании БД необходимо учитывать следующее:\n• преподаватель для руководства студентами-дипломниками предлагает несколько тем дипломных работ. Тема дипломной работы может быть предложена только одним преподавателем;\n• студент выбирает одну тему дипломной работы. Тема может быть выбрана только одним студентом.\n• студент получает одну отметку. Отметка соответствует одному студенту.\nКроме того следует учесть:\n• преподаватель не обязательно предлагает тему дипломной работы (он может не иметь научной степени или научного звания, необходимых для руководителя дипломной работы). Каждая тема обязательно предлагается преподавателем для написания дипломной работы;\n• каждый студент обязательно выбирает тему для написания дипломной работы. Тема не обязательно выбирается студентом;\n• каждый студент обязательно получает отметку. Каждая отметка обязательно соответствует студенту.", "Comments": [], "entities": [{"start_offset": 494, "end_offset": 515, "label": "integer"}, {"start_offset": 517, "end_offset": 532, "label": "string"}, {"start_offset": 534, "end_offset": 543, "label": "string"}, {"start_offset": 545, "end_offset": 551, "label": "string"}, {"start_offset": 562, "end_offset": 579, "label": "integer"}, {"start_offset": 581, "end_offset": 602, "label": "string"}, {"start_offset": 616, "end_offset": 637, "label": "integer"}, {"start_offset": 639, "end_offset": 645, "label": "integer"}, {"start_offset": 674, "end_offset": 680, "label": "integer"}, {"start_offset": 739, "end_offset": 756, "label": "integer"}, {"start_offset": 758, "end_offset": 778, "label": "string"}, {"start_offset": 780, "end_offset": 787, "label": "string"}, {"start_offset": 789, "end_offset": 795, "label": "string"}, {"start_offset": 797, "end_offset": 804, "label": "string"}, {"start_offset": 806, "end_offset": 813, "label": "integer"}, {"start_offset": 815, "end_offset": 821, "label": "string"}]}
{"id": 1387, "text": "Издательский центр \"Печать\" заключает с писателями контракты на издание книг. В течение срока контракта писатели работают только с этим центром и могут объединяться в творческие группы для совместного написания книг. Издательскийцентр может расторгнуть или перезаключить контракт с писателем на новый срок. Центр издает написанные книги и продает их заказчикам: организациям, магазинам, библиотекам и др. За изданные книги писатели получают гонорары. Необходимо спроектировать базу данных Издательский центр, информация которой будет использоваться для определения гонораров писателям за изданные книги, исчисления срока контракта с писателями, количества написанных книг писателем за время контракта, затрат на издание книг, прибыли от продажи книг и др.\nВ БД должна храниться информация:\n• о писателях: номер паспорта, фамилия, имя, отчество, домашний адрес, телефон;\n• контрактах: номер контракта, дата заключения контракта, срок контракта (лет), контракт расторгнут или не расторгнут (Да/Нет), дата расторжения контракта;\n• книгах: шифр книги, название, тираж, дата выхода из печати, себестоимость (руб.), цена продажи (руб.), гонорар (на всех авторов книги, тыс. руб.);\n• заказчиках: название заказчика, адрес, телефон, обращаться к (Ф.И.О.);\n• заказах: номер заказа, дата поступления заказа, дата выполнения заказа, количество экземпляров заказываемой книги.\nПри проектировании БД необходимо учитывать следующее:\n• писателю соответствует один контракт (в случае перезаключения контракта прежний контракт заменяется новым). Контракт заключается с одним писателем;\n• писатель может написать несколько книг. Книга может быть написана несколькими писателями;\n• на книгу может быть сделано несколько заказов. Заказ оформляется на одну книгу;\n• заказчик может сделать несколько заказов. Заказ оформляется на одного заказчика.\nКроме того следует учесть:\n• каждому писателю обязательно соответствует контракт. Каждый контракт обязательно заключается с писателем;\n• писатель не обязательно пишет книгу (он заключил контракт, но по какой-то причине не пишет книгу). Каждая книга обязательно пишется одним или несколькими писателями;\n• на книгу не обязательно делается заказ (она может быть не востребована заказчиками). Каждый заказ обязательно оформляется на книгу;\n• каждый заказчик обязательно делает заказ. Каждый заказ обязательно оформляется на заказчика.", "Comments": [], "entities": [{"start_offset": 805, "end_offset": 819, "label": "integer"}, {"start_offset": 821, "end_offset": 828, "label": "string"}, {"start_offset": 830, "end_offset": 833, "label": "string"}, {"start_offset": 835, "end_offset": 843, "label": "string"}, {"start_offset": 845, "end_offset": 859, "label": "string"}, {"start_offset": 861, "end_offset": 868, "label": "integer"}, {"start_offset": 884, "end_offset": 899, "label": "integer"}, {"start_offset": 901, "end_offset": 926, "label": "timestamp"}, {"start_offset": 928, "end_offset": 942, "label": "integer"}, {"start_offset": 950, "end_offset": 987, "label": "boolean"}, {"start_offset": 998, "end_offset": 1024, "label": "timestamp"}, {"start_offset": 1036, "end_offset": 1046, "label": "string"}, {"start_offset": 1048, "end_offset": 1056, "label": "string"}, {"start_offset": 1058, "end_offset": 1063, "label": "integer"}, {"start_offset": 1065, "end_offset": 1086, "label": "timestamp"}, {"start_offset": 1088, "end_offset": 1101, "label": "double"}, {"start_offset": 1110, "end_offset": 1122, "label": "double"}, {"start_offset": 1131, "end_offset": 1138, "label": "double"}, {"start_offset": 1189, "end_offset": 1207, "label": "string"}, {"start_offset": 1209, "end_offset": 1214, "label": "string"}, {"start_offset": 1216, "end_offset": 1223, "label": "integer"}, {"start_offset": 1225, "end_offset": 1237, "label": "string"}, {"start_offset": 1259, "end_offset": 1271, "label": "integer"}, {"start_offset": 1273, "end_offset": 1296, "label": "timestamp"}, {"start_offset": 1298, "end_offset": 1320, "label": "timestamp"}, {"start_offset": 1322, "end_offset": 1344, "label": "integer"}]}
{"id": 1388, "text": "Задание 27. Проект АВИАЛИНИИ\nАвиакомпания \"Полет\" занимается авиаперевозками пассажиров. Авиакомпанией установлены маршруты полетов: Минск-Франкфурт, Минск-Рига и др. Рейсы осуществляются по установленным маршрутам согласно расписанию. За каждым самолетом закреплен командир корабля. Необходимо спроектировать базу данных Авиалинии, информация которой будет использоваться для определения доходов, приносимых рейсами, даты и времени прибытия самолета в аэропорт назначения, истечения срока эксплуатации самолета и др.\nВ БД должна храниться информация:\n• о Маршрутах: номер маршрута, аэропорт вылета, аэропорт назначения, цена билета на маршрут (руб.), продолжительность полета (мин.);\n• рейсах: номер рейса, дата и время вылета, рейс отменен или не отменен (Да/Нет);\n• пассажирах: номер паспорта, Ф.И.О. пассажира, адрес, телефон;\n• самолетах: бортовой номер, модель (Боинг-747, Ту-134, Ил-62 и др.), дата изготовления, срок эксплуатации (лет), готовность или не готовность к вылету (Да/Нет, \"Да\" означает, что самолет находится в исправном состоянии и готов к вылету);\n• командирах корабля: личный номер, Ф.И.О. командира, адрес, телефон, налет (часов).\nПри проектировании БД необходимо учитывать следующее:\n• по маршруту могут осуществляться несколько рейсов. Рейс осуществляется по одному маршруту;\n• пассажир может купить билеты на несколько рейсов. Одним и тем же рейсом могут лететь несколько пассажиров;\n• самолет может назначаться на несколько рейсов. На рейс назначается один самолет;\n• у самолета один командир корабля. Командир корабля закреплен за одним самолетом.\nКроме того следует учесть:\n• по каждому маршруту обязательно осуществляется один или несколько рейсов. Каждый рейс обязательно осуществляется по некоторому маршруту;\n• каждый пассажир обязательно летит рейсом. Рейс не обязательно имеет пассажиров (ни один пассажир не купил билет на рейс. В этом случае рейс отменяется);\n• каждый самолет обязательно назначается на рейс. Каждому рейсу обязательно назначается самолет;\n• у каждого самолета обязательно есть командир корабля. Каждый командир корабля обязательно закрепляется за самолетом.", "Comments": [], "entities": [{"start_offset": 567, "end_offset": 581, "label": "integer"}, {"start_offset": 583, "end_offset": 598, "label": "string"}, {"start_offset": 600, "end_offset": 619, "label": "string"}, {"start_offset": 621, "end_offset": 643, "label": "double"}, {"start_offset": 652, "end_offset": 676, "label": "integer"}, {"start_offset": 695, "end_offset": 706, "label": "integer"}, {"start_offset": 708, "end_offset": 712, "label": "timestamp"}, {"start_offset": 715, "end_offset": 721, "label": "timestamp"}, {"start_offset": 729, "end_offset": 756, "label": "boolean"}, {"start_offset": 781, "end_offset": 795, "label": "integer"}, {"start_offset": 797, "end_offset": 813, "label": "string"}, {"start_offset": 815, "end_offset": 820, "label": "string"}, {"start_offset": 822, "end_offset": 829, "label": "integer"}, {"start_offset": 844, "end_offset": 858, "label": "integer"}, {"start_offset": 860, "end_offset": 867, "label": "string"}, {"start_offset": 900, "end_offset": 918, "label": "timestamp"}, {"start_offset": 920, "end_offset": 937, "label": "integer"}, {"start_offset": 945, "end_offset": 982, "label": "boolean"}, {"start_offset": 1092, "end_offset": 1104, "label": "integer"}, {"start_offset": 1106, "end_offset": 1122, "label": "string"}, {"start_offset": 1124, "end_offset": 1129, "label": "string"}, {"start_offset": 1131, "end_offset": 1138, "label": "integer"}, {"start_offset": 1140, "end_offset": 1146, "label": "integer"}]}
{"id": 1389, "text": "Фирмы – поставщики автомобильного топлива – \"Белнефтехим\", \"Славнефть\", \"А-100\", \"Лукойл\" имеют сеть заправочных автостанций в Республике Беларусь. На автозаправках реализуется за безналичный расчет с помощью специальных пластиковых карт автомобильное топливо всех видов – бензин-76, бензин-92, бензин-95, бензин-96, дизельное топливо, газ. Необходимо спроектировать базу данных Автозаправки, информация которой будет использоваться для анализа продаж автомобильного топлива за безналичный расчет клиентам по видам топлива в сети заправок конкретной фирмы-производителя, продаж различных видов топлива клиентам по всем заправочным станциям, спроса на автомобильное топливо в динамике за определенные промежутки времени и др.\nВ БД должна храниться информация:\n• о Клиентах: карт-счет клиента, Ф.И.О. клиента, адрес, телефон;\n• Автозаправках: код автозаправки, название фирмы, адрес автозаправки;\n• Фирмах: название фирмы, юридический адрес, телефон;\n• Топливе: код топлива, вид топлива, единица измерения, цена (руб.);\n• ежедневной Продаже топлива клиентам: дата продажи, карт-счет клиента, код автозаправки, код топлива, количество (в натуральном выражении).\nПри проектировании БД необходимо учитывать следующее:\n• фирма имеет несколько автозаправок. Автозаправка принадлежит только одной фирме;\n• фирма предоставляет несколько видов топлива. Каждый вид топлива предоставляется несколькими фирмами;\n• каждый вид топлива связан с несколькими продажами. Продажа связана с одним видом топлива;\n• на автозаправке осуществляются несколько продаж. Продажа топлива связана с одной автозаправкой;\n• с клиентом могут быть связаны несколько продаж. Продажа связана только с одним клиентом.\nКроме того следует учесть:\n• каждая фирма обязательно имеет автозаправки. Каждая автозаправка обязательно принадлежит определенной фирме;\n• каждая фирма обязательно предоставляет топливо. Каждый вид топлива обязательно поставляется фирмами;\n• топливо некоторого вида не обязательно связано с продажами. Каждая продажа обязательно связана с топливом некоторого вида;\n• на каждой заправке обязательно осуществляются продажи топлива. Каждая продажа обязательно связана с автозаправкой;\n• с клиентом не обязательно связаны продажи топлива (клиент может не осуществлять покупки топлива). Каждая продажа топлива обязательно связана с клиентом.", "Comments": [], "entities": [{"start_offset": 773, "end_offset": 790, "label": "integer"}, {"start_offset": 792, "end_offset": 806, "label": "string"}, {"start_offset": 808, "end_offset": 813, "label": "string"}, {"start_offset": 815, "end_offset": 822, "label": "integer"}, {"start_offset": 841, "end_offset": 857, "label": "integer"}, {"start_offset": 859, "end_offset": 873, "label": "string"}, {"start_offset": 875, "end_offset": 894, "label": "string"}, {"start_offset": 905, "end_offset": 919, "label": "string"}, {"start_offset": 921, "end_offset": 938, "label": "string"}, {"start_offset": 940, "end_offset": 947, "label": "integer"}, {"start_offset": 960, "end_offset": 971, "label": "integer"}, {"start_offset": 973, "end_offset": 984, "label": "string"}, {"start_offset": 986, "end_offset": 1003, "label": "integer"}, {"start_offset": 1005, "end_offset": 1010, "label": "double"}, {"start_offset": 1057, "end_offset": 1069, "label": "timestamp"}, {"start_offset": 1071, "end_offset": 1088, "label": "integer"}, {"start_offset": 1090, "end_offset": 1106, "label": "integer"}, {"start_offset": 1108, "end_offset": 1119, "label": "integer"}, {"start_offset": 1121, "end_offset": 1132, "label": "integer"}]}
{"id": 1390, "text": "ЗАО \"Витекс\" выпускает различную косметическую продукцию: кремы, шампуни, бальзамы и др. Некоторые наборы косметических средств составляют одну линию-бренд: \"Кислородная линия\", \"Красота от природы\", \"Афродита\" и др. Предприятия торговли и сервиса осуществляют заказы у ЗАО \"Витекс\" на поставку им определенных видов продукции с указанием необходимого количества и даты поставки по мере продаж и расходования предыдущих партий. ЗАО \"Витекс\" выполняет заказы каждого предприятия разовой доставкой или несколькими доставками по частям от заказанного количества в течение указанного срока исполнения заказов. Необходимо спроектировать базу данных Косметическая продукция, информация которой будет использоваться для хранения информации о номенклатуре выпускаемых косметических средств, анализа спроса на отдельные виды и линии косметических средств, учета поступления и исполнения заказов предприятий в заданные сроки и др.\nВ БД должна храниться информация:\n• о Товарах: код товара, наименование товара, код бренда, единица измерения, цена (руб.);\n• Брендах: код бренда, наименование бренда;\n• Предприятиях: код предприятия, наименование предприятия, адрес, телефон;\n• Заказах: код заказа, код предприятия, код товара, количество товара в заказе, дата заказа, дата к исполнению;\n• Доставках: код заказа, дата фактического исполнения заказа, количество товара в доставке.\nПри проектировании БД необходимо учитывать следующее:\n• бренд включает несколько наименований товаров. Товар может принадлежать только одному бренду;\n• товар может содержаться в нескольких заказах. Заказ связан с одним видом товара;\n• предприятие может осуществлять несколько заказов. Заказ связан с одним предприятием;\n• заказ может быть исполнен несколькими доставками по частям от требуемого количества продукции. Доставка связана с одним заказом.\nКроме того следует учесть:\n• каждый бренд обязательно включает несколько наименований товаров. Товар не обязательно принадлежит какому-либо бренду;\n• товар не обязательно должен быть заказан. Каждый заказ обязательно связан с определенным товаром;\n• предприятие не обязательно осуществляет заказы. Каждый заказ обязательно осуществляется некоторым предприятием;\n• заказ не обязательно может быть исполнен (доставлен). Каждая доставка обязательно связана с заказом товара.", "Comments": [], "entities": [{"start_offset": 968, "end_offset": 978, "label": "integer"}, {"start_offset": 980, "end_offset": 999, "label": "string"}, {"start_offset": 1001, "end_offset": 1011, "label": "integer"}, {"start_offset": 1013, "end_offset": 1030, "label": "string"}, {"start_offset": 1032, "end_offset": 1037, "label": "double"}, {"start_offset": 1056, "end_offset": 1066, "label": "integer"}, {"start_offset": 1068, "end_offset": 1087, "label": "string"}, {"start_offset": 1105, "end_offset": 1120, "label": "integer"}, {"start_offset": 1122, "end_offset": 1146, "label": "string"}, {"start_offset": 1148, "end_offset": 1153, "label": "string"}, {"start_offset": 1155, "end_offset": 1162, "label": "integer"}, {"start_offset": 1175, "end_offset": 1185, "label": "integer"}, {"start_offset": 1187, "end_offset": 1203, "label": "integer"}, {"start_offset": 1204, "end_offset": 1214, "label": "integer"}, {"start_offset": 1216, "end_offset": 1242, "label": "integer"}, {"start_offset": 1244, "end_offset": 1255, "label": "timestamp"}, {"start_offset": 1257, "end_offset": 1274, "label": "timestamp"}, {"start_offset": 1289, "end_offset": 1299, "label": "integer"}, {"start_offset": 1301, "end_offset": 1336, "label": "timestamp"}, {"start_offset": 1338, "end_offset": 1366, "label": "integer"}]}
{"id": 1391, "text": "Предприятие \"Минскзеленстрой\" в весенне-летний период осуществляет выполнение заказов на цветочное оформление парков, площадей, прилегающих территорий предприятий и организаций столицы (заказчиков): Мингорисполкома, БГЭУ, МТЗ и др. Для цветочного оформления используется рассада различных цветов: агератум, гортензия, петуния и др. Предприятию \"Минскзеленстрой\" рассаду цветов поставляют селекционеры различных предприятий: \"Цветы столицы\", \"Цветочные композиции\", \"Цветники\" и др. Необходимо спроектировать базу данных МИНСКЗЕЛЕНСТРОЙ, информация которой будет использоваться для учета на предприятии поставляемой рассады цветов, расчета стоимости заказов на цветочное оформление и др.\nВ БД должна храниться информация:\n• о поставщиках рассады цветов: код поставщика, название поставщика, адрес поставщика;\n• цветах: код цветка, название цветка, код поставщика, цена рассады (руб.);\n• заказчиках: код заказчика, название заказчика, адрес заказчика, телефон;\n• договорах: номер договора, код заказчика, дата оформления договора, дата исполнения договора;\n• заказах (о цветах, используемых для выполнения договора): номер договора, код цветка, количество рассады (шт.).\nПри проектировании БД необходимо учитывать следующее:\n• поставщик поставляет несколько видов цветов. Цветок некоторого вида поставляется только одним поставщиком;\n• заказчик может заключить несколько договоров. Каждый договор заключается одним заказчиком;\n• договору могут соответствовать несколько заказов. Каждый заказ имеет отношение к одному договору;\n• каждый вид цветка может участвовать в нескольких заказах. Каждый заказ имеет отношение к одному виду цветка.\nКроме того следует учесть:\n• каждый поставщик обязательно поставляет рассаду хотя бы одного цветка. Каждый вид цветка обязательно поставляется одним из поставщиков;\n• каждый заказчик обязательно заключает хотя бы один договор. Каждый договор обязательно имеет заказчика;\n• каждому договору обязательно соответствует хотя бы один заказ. Каждый заказ обязательно соответствует некоторому договору;\n• поставляемый цветок не обязательно может иметь заказ (на него нет спроса). Каждый заказ обязательно соответствует некоторому виду цветка.", "Comments": [], "entities": [{"start_offset": 818, "end_offset": 828, "label": "integer"}, {"start_offset": 830, "end_offset": 845, "label": "string"}, {"start_offset": 847, "end_offset": 861, "label": "integer"}, {"start_offset": 863, "end_offset": 875, "label": "double"}, {"start_offset": 898, "end_offset": 911, "label": "integer"}, {"start_offset": 913, "end_offset": 931, "label": "string"}, {"start_offset": 933, "end_offset": 948, "label": "string"}, {"start_offset": 950, "end_offset": 957, "label": "integer"}, {"start_offset": 972, "end_offset": 986, "label": "integer"}, {"start_offset": 988, "end_offset": 1001, "label": "integer"}, {"start_offset": 1003, "end_offset": 1027, "label": "timestamp"}, {"start_offset": 1029, "end_offset": 1053, "label": "timestamp"}, {"start_offset": 1115, "end_offset": 1129, "label": "integer"}, {"start_offset": 1131, "end_offset": 1141, "label": "integer"}, {"start_offset": 1143, "end_offset": 1161, "label": "integer"}]}
{"id": 1392, "text": "Задание: Разработать логическую модель базы данных для интернет-магазина, включающую информацию о товарах, заказах, клиентах и доставке. Определить структуру таблиц:\n   - Товары: артикул, название, описание, цена, количество на складе, категория, производитель.\n   - Заказы: номер заказа, дата заказа, статус заказа, клиент, адрес доставки, стоимость заказа.\n   - Клиенты: ФИО, контактные данные (телефон, email), адрес доставки.\n   - Доставка: номер заказа, дата доставки, статус доставки, курьер, адрес доставки.", "Comments": [], "entities": [{"start_offset": 179, "end_offset": 186, "label": "integer"}, {"start_offset": 188, "end_offset": 196, "label": "string"}, {"start_offset": 198, "end_offset": 206, "label": "string"}, {"start_offset": 208, "end_offset": 212, "label": "double"}, {"start_offset": 214, "end_offset": 234, "label": "integer"}, {"start_offset": 236, "end_offset": 245, "label": "string"}, {"start_offset": 247, "end_offset": 260, "label": "string"}, {"start_offset": 275, "end_offset": 287, "label": "integer"}, {"start_offset": 289, "end_offset": 300, "label": "timestamp"}, {"start_offset": 302, "end_offset": 315, "label": "string"}, {"start_offset": 317, "end_offset": 323, "label": "string"}, {"start_offset": 325, "end_offset": 339, "label": "string"}, {"start_offset": 341, "end_offset": 357, "label": "double"}, {"start_offset": 373, "end_offset": 376, "label": "string"}, {"start_offset": 378, "end_offset": 395, "label": "string"}, {"start_offset": 414, "end_offset": 428, "label": "string"}, {"start_offset": 445, "end_offset": 457, "label": "integer"}, {"start_offset": 459, "end_offset": 472, "label": "timestamp"}, {"start_offset": 474, "end_offset": 489, "label": "string"}, {"start_offset": 491, "end_offset": 497, "label": "string"}, {"start_offset": 499, "end_offset": 513, "label": "string"}]}
{"id": 1393, "text": "Задание: Создать логическую модель базы данных для системы управления персоналом, содержащую информацию о сотрудниках, их должностях, зарплатах и отпусках. Определить структуру таблиц:\n   - Сотрудники: ФИО, дата рождения, контактные данные (телефон, email), должность.\n   - Должности: название должности, описание, уровень зарплаты.\n   - Зарплаты: ФИО сотрудника, должность, дата начисления зарплаты, сумма зарплаты.\n   - Отпуска: ФИО сотрудника, дата начала отпуска, дата окончания отпуска, количество дней отпуска.", "Comments": [], "entities": [{"start_offset": 202, "end_offset": 205, "label": "string"}, {"start_offset": 207, "end_offset": 220, "label": "timestamp"}, {"start_offset": 222, "end_offset": 239, "label": "string"}, {"start_offset": 258, "end_offset": 267, "label": "string"}, {"start_offset": 285, "end_offset": 303, "label": "string"}, {"start_offset": 305, "end_offset": 313, "label": "string"}, {"start_offset": 315, "end_offset": 331, "label": "double"}, {"start_offset": 348, "end_offset": 362, "label": "string"}, {"start_offset": 364, "end_offset": 373, "label": "string"}, {"start_offset": 375, "end_offset": 399, "label": "timestamp"}, {"start_offset": 401, "end_offset": 415, "label": "double"}, {"start_offset": 431, "end_offset": 445, "label": "string"}, {"start_offset": 447, "end_offset": 466, "label": "timestamp"}, {"start_offset": 468, "end_offset": 490, "label": "timestamp"}, {"start_offset": 492, "end_offset": 515, "label": "integer"}]}
{"id": 1394, "text": "Разработать логическую модель базы данных для системы управления складом, включающую информацию о товарах, их наличии на складе, поставщиках и заказах на поставку. Структура таблиц:\n- Товары: артикул, название, описание, единица измерения, минимальный остаток, максимальный остаток.\n- Наличие на складе: артикул товара, количество на складе.\n- Поставщики: название поставщика, контактные данные (телефон, email), адрес.\n- Заказы на поставку: номер заказа, дата заказа, статус заказа, поставщик, товары в заказе, количество товаров, стоимость заказа.", "Comments": [], "entities": [{"start_offset": 192, "end_offset": 199, "label": "integer"}, {"start_offset": 201, "end_offset": 209, "label": "string"}, {"start_offset": 211, "end_offset": 219, "label": "string"}, {"start_offset": 221, "end_offset": 238, "label": "string"}, {"start_offset": 240, "end_offset": 259, "label": "integer"}, {"start_offset": 261, "end_offset": 281, "label": "integer"}, {"start_offset": 304, "end_offset": 318, "label": "integer"}, {"start_offset": 320, "end_offset": 340, "label": "integer"}, {"start_offset": 356, "end_offset": 375, "label": "string"}, {"start_offset": 377, "end_offset": 394, "label": "string"}, {"start_offset": 413, "end_offset": 418, "label": "string"}, {"start_offset": 442, "end_offset": 454, "label": "integer"}, {"start_offset": 456, "end_offset": 467, "label": "timestamp"}, {"start_offset": 469, "end_offset": 482, "label": "string"}, {"start_offset": 484, "end_offset": 493, "label": "string"}, {"start_offset": 495, "end_offset": 510, "label": "string"}, {"start_offset": 512, "end_offset": 530, "label": "integer"}, {"start_offset": 532, "end_offset": 548, "label": "double"}]}
{"id": 1395, "text": "Создать логическую модель базы данных для системы управления библиотекой, содержащую информацию о книгах, читателях, выданных книгах и сроках возврата. Структура таблиц:\n- Книги: ISBN, название, автор, количество страниц, жанр.\n- Читатели: ФИО, контактные данные (телефон, email), адрес.\n- Выданные книги: ISBN книги, ФИО читателя, дата выдачи, дата возврата.", "Comments": [], "entities": [{"start_offset": 179, "end_offset": 183, "label": "integer"}, {"start_offset": 185, "end_offset": 193, "label": "string"}, {"start_offset": 195, "end_offset": 200, "label": "string"}, {"start_offset": 202, "end_offset": 220, "label": "integer"}, {"start_offset": 222, "end_offset": 226, "label": "string"}, {"start_offset": 240, "end_offset": 243, "label": "string"}, {"start_offset": 245, "end_offset": 262, "label": "string"}, {"start_offset": 281, "end_offset": 286, "label": "string"}, {"start_offset": 306, "end_offset": 316, "label": "integer"}, {"start_offset": 318, "end_offset": 330, "label": "string"}, {"start_offset": 332, "end_offset": 343, "label": "timestamp"}, {"start_offset": 345, "end_offset": 358, "label": "timestamp"}]}
{"id": 1396, "text": "Разработать логическую модель базы данных для системы управления медицинской клиникой, включающую информацию о пациентах, врачах, назначениях и результатах анализов. Структура таблиц:\n- Пациенты: ФИО, дата рождения, контактные данные (телефон, email), адрес.\n- Врачи: ФИО, специализация, опыт работы.\n- Назначения: ФИО пациента, ФИО врача, дата назначения, диагноз, рекомендации.\n- Результаты анализов: ФИО пациента, дата анализа, результат анализа.", "Comments": [], "entities": [{"start_offset": 196, "end_offset": 199, "label": "string"}, {"start_offset": 201, "end_offset": 214, "label": "timestamp"}, {"start_offset": 216, "end_offset": 233, "label": "string"}, {"start_offset": 252, "end_offset": 257, "label": "string"}, {"start_offset": 268, "end_offset": 271, "label": "string"}, {"start_offset": 273, "end_offset": 286, "label": "string"}, {"start_offset": 288, "end_offset": 299, "label": "integer"}, {"start_offset": 315, "end_offset": 327, "label": "string"}, {"start_offset": 329, "end_offset": 338, "label": "string"}, {"start_offset": 340, "end_offset": 355, "label": "timestamp"}, {"start_offset": 357, "end_offset": 364, "label": "string"}, {"start_offset": 366, "end_offset": 378, "label": "string"}, {"start_offset": 403, "end_offset": 415, "label": "string"}, {"start_offset": 417, "end_offset": 429, "label": "timestamp"}, {"start_offset": 431, "end_offset": 448, "label": "string"}]}
{"id": 1397, "text": "Создать логическую модель базы данных для системы управления рестораном, содержащую информацию о блюдах, заказах, клиентах и сотрудниках. Структура таблиц:\n- Блюда: название, описание, цена.\n- Заказы: номер заказа, дата заказа, статус заказа, клиент, блюда в заказе, количество блюд, стоимость заказа.\n- Клиенты: ФИО, контактные данные (телефон, email), адрес.\n- Сотрудники: ФИО, должность, контактные данные (телефон, email).", "Comments": [], "entities": [{"start_offset": 165, "end_offset": 173, "label": "string"}, {"start_offset": 175, "end_offset": 183, "label": "string"}, {"start_offset": 185, "end_offset": 189, "label": "double"}, {"start_offset": 201, "end_offset": 213, "label": "integer"}, {"start_offset": 215, "end_offset": 226, "label": "timestamp"}, {"start_offset": 228, "end_offset": 241, "label": "string"}, {"start_offset": 243, "end_offset": 249, "label": "string"}, {"start_offset": 251, "end_offset": 265, "label": "string"}, {"start_offset": 267, "end_offset": 282, "label": "integer"}, {"start_offset": 284, "end_offset": 300, "label": "double"}, {"start_offset": 313, "end_offset": 316, "label": "string"}, {"start_offset": 318, "end_offset": 335, "label": "string"}, {"start_offset": 354, "end_offset": 359, "label": "string"}, {"start_offset": 375, "end_offset": 378, "label": "string"}, {"start_offset": 380, "end_offset": 389, "label": "string"}, {"start_offset": 391, "end_offset": 408, "label": "string"}]}
{"id": 1398, "text": "Создать логическую модель базы данных для системы управления гостиницей, включающую информацию о номерах, гостях, бронировании и услугах. Структура таблиц:\n- Номера: номер комнаты, тип номера, количество мест, стоимость.\n- Гости: ФИО, контактные данные (телефон, email), адрес.\n- Бронирование: номер бронирования, дата бронирования, статус бронирования, гость, номер комнаты, количество дней.\n- Услуги: название услуги, описание, стоимость.", "Comments": [], "entities": [{"start_offset": 166, "end_offset": 179, "label": "integer"}, {"start_offset": 181, "end_offset": 191, "label": "string"}, {"start_offset": 193, "end_offset": 208, "label": "integer"}, {"start_offset": 210, "end_offset": 219, "label": "double"}, {"start_offset": 230, "end_offset": 233, "label": "string"}, {"start_offset": 235, "end_offset": 252, "label": "string"}, {"start_offset": 271, "end_offset": 276, "label": "string"}, {"start_offset": 294, "end_offset": 312, "label": "integer"}, {"start_offset": 314, "end_offset": 331, "label": "timestamp"}, {"start_offset": 333, "end_offset": 352, "label": "string"}, {"start_offset": 354, "end_offset": 359, "label": "string"}, {"start_offset": 361, "end_offset": 374, "label": "integer"}, {"start_offset": 376, "end_offset": 391, "label": "integer"}, {"start_offset": 403, "end_offset": 418, "label": "string"}, {"start_offset": 420, "end_offset": 428, "label": "string"}, {"start_offset": 430, "end_offset": 439, "label": "double"}]}
{"id": 1399, "text": "Создать логическую модель базы данных для системы управления курьерской службой, включающую информацию о заказах, курьерах, маршрутах и доставке. Структура таблиц:\n- Заказы: номер заказа, дата заказа, статус заказа, клиент, адрес доставки, стоимость заказа.\n- Курьеры: ФИО, контактные данные (телефон, email), адрес.\n- Маршруты: номер маршрута, дата маршрута, список адресов доставки.\n- Доставка: номер заказа, дата доставки, статус доставки, курьер, адрес доставки.", "Comments": [], "entities": [{"start_offset": 174, "end_offset": 186, "label": "integer"}, {"start_offset": 188, "end_offset": 199, "label": "timestamp"}, {"start_offset": 201, "end_offset": 214, "label": "string"}, {"start_offset": 216, "end_offset": 222, "label": "string"}, {"start_offset": 224, "end_offset": 238, "label": "string"}, {"start_offset": 240, "end_offset": 256, "label": "double"}, {"start_offset": 269, "end_offset": 272, "label": "string"}, {"start_offset": 274, "end_offset": 291, "label": "string"}, {"start_offset": 310, "end_offset": 315, "label": "string"}, {"start_offset": 329, "end_offset": 343, "label": "integer"}, {"start_offset": 345, "end_offset": 358, "label": "timestamp"}, {"start_offset": 360, "end_offset": 383, "label": "string"}, {"start_offset": 397, "end_offset": 409, "label": "integer"}, {"start_offset": 411, "end_offset": 424, "label": "timestamp"}, {"start_offset": 426, "end_offset": 441, "label": "string"}, {"start_offset": 443, "end_offset": 449, "label": "string"}, {"start_offset": 451, "end_offset": 465, "label": "string"}]}
{"id": 1400, "text": "Разработать логическую модель базы данных для системы управления автосервисом, включающую информацию о клиентах, автомобилях, ремонтных работах и запчастях. Структура таблиц:\n- Клиенты: ФИО, контактные данные (телефон, email), адрес.\n- Автомобили: VIN-код, марка, модель, год выпуска, пробег.\n- Ремонтные работы: номер заказа, дата заказа, статус заказа, клиент, автомобиль, описание работ, стоимость работ.\n- Запчасти: номер заказа, дата заказа, статус заказа, клиент, автомобиль, название запчасти, количество запчастей, стоимость запчастей.", "Comments": [], "entities": [{"start_offset": 186, "end_offset": 189, "label": "string"}, {"start_offset": 191, "end_offset": 208, "label": "string"}, {"start_offset": 227, "end_offset": 232, "label": "string"}, {"start_offset": 248, "end_offset": 255, "label": "integer"}, {"start_offset": 257, "end_offset": 262, "label": "string"}, {"start_offset": 264, "end_offset": 270, "label": "string"}, {"start_offset": 272, "end_offset": 283, "label": "integer"}, {"start_offset": 285, "end_offset": 291, "label": "integer"}, {"start_offset": 313, "end_offset": 325, "label": "integer"}, {"start_offset": 327, "end_offset": 338, "label": "timestamp"}, {"start_offset": 340, "end_offset": 353, "label": "string"}, {"start_offset": 355, "end_offset": 361, "label": "string"}, {"start_offset": 363, "end_offset": 373, "label": "string"}, {"start_offset": 375, "end_offset": 389, "label": "string"}, {"start_offset": 391, "end_offset": 406, "label": "double"}, {"start_offset": 420, "end_offset": 432, "label": "integer"}, {"start_offset": 434, "end_offset": 445, "label": "timestamp"}, {"start_offset": 447, "end_offset": 460, "label": "string"}, {"start_offset": 462, "end_offset": 468, "label": "string"}, {"start_offset": 470, "end_offset": 480, "label": "string"}, {"start_offset": 482, "end_offset": 499, "label": "string"}, {"start_offset": 501, "end_offset": 521, "label": "integer"}, {"start_offset": 523, "end_offset": 542, "label": "double"}]}
{"id": 1401, "text": "Создать логическую модель базы данных для системы управления кинотеатром, включающую информацию о фильмах, сеансах, билетах и зрителях. Структура таблиц:\n- Фильмы: название, описание, жанр, продолжительность, рейтинг.\n- Сеансы: номер сеанса, дата и время сеанса, название фильма, количество мест.\n- Билеты: номер билета, номер сеанса, ФИО зрителя, стоимость билета.\n- Зрители: ФИО, контактные данные (телефон, email), адрес.", "Comments": [], "entities": [{"start_offset": 164, "end_offset": 172, "label": "string"}, {"start_offset": 174, "end_offset": 182, "label": "string"}, {"start_offset": 184, "end_offset": 188, "label": "string"}, {"start_offset": 190, "end_offset": 207, "label": "integer"}, {"start_offset": 209, "end_offset": 216, "label": "double"}, {"start_offset": 228, "end_offset": 240, "label": "integer"}, {"start_offset": 242, "end_offset": 247, "label": "timestamp"}, {"start_offset": 249, "end_offset": 255, "label": "timestamp"}, {"start_offset": 263, "end_offset": 278, "label": "string"}, {"start_offset": 280, "end_offset": 295, "label": "integer"}, {"start_offset": 307, "end_offset": 319, "label": "integer"}, {"start_offset": 321, "end_offset": 333, "label": "integer"}, {"start_offset": 335, "end_offset": 346, "label": "string"}, {"start_offset": 348, "end_offset": 364, "label": "double"}, {"start_offset": 377, "end_offset": 380, "label": "string"}, {"start_offset": 382, "end_offset": 399, "label": "string"}, {"start_offset": 418, "end_offset": 423, "label": "string"}]}
{"id": 1402, "text": "Проект: Создание базы данных для учета клиентов и заказов в интернет-магазине.\nПредметная область: Интернет-магазин, продающий товары для дома.\nСущности: Клиент, Заказ, Товар.\nАтрибуты:\n- Клиент: ФИО, адрес, телефон, email.\n- Заказ: Дата заказа, статус заказа, сумма заказа.\n- Товар: Название, цена, количество.", "Comments": [], "entities": [{"start_offset": 196, "end_offset": 199, "label": "string"}, {"start_offset": 201, "end_offset": 206, "label": "string"}, {"start_offset": 208, "end_offset": 215, "label": "integer"}, {"start_offset": 217, "end_offset": 222, "label": "string"}, {"start_offset": 233, "end_offset": 244, "label": "timestamp"}, {"start_offset": 246, "end_offset": 259, "label": "string"}, {"start_offset": 261, "end_offset": 273, "label": "double"}, {"start_offset": 284, "end_offset": 292, "label": "string"}, {"start_offset": 294, "end_offset": 298, "label": "double"}, {"start_offset": 300, "end_offset": 310, "label": "integer"}]}
{"id": 1403, "text": "Задание: Создать логическую модель базы данных для системы управления задачами.\nСистема управления задачами предназначена для организации и контроля выполнения задач в команде. Она позволяет создавать задачи, назначать ответственных, устанавливать сроки выполнения, отслеживать прогресс и оставлять комментарии.\nЛогическая модель базы данных должна включать следующие элементы:\n1. Таблица \"Задачи\" с полями:\n   - Идентификатор задачи (ID)\n   - Название задачи\n   - Описание задачи\n   - Ответственный за задачу\n   - Дата создания задачи\n   - Дата завершения задачи\n   - Статус задачи (в процессе, выполнена, отменена)\n2. Таблица \"Комментарии\" с полями:\n   - Идентификатор комментария (ID)\n   - Идентификатор задачи (ID)\n   - Автор комментария\n   - Текст комментария\n   - Дата создания комментария\n3. Таблица \"Статусы\" с полями:\n   - Идентификатор статуса (ID)\n   - Название статуса\n4. Таблица \"Ответственные\" с полями:\n   - Идентификатор ответственного (ID)\n   - Имя ответственного\n   - Фамилия ответственного\n5. Таблица \"Связи\" с полями:\n   - Идентификатор задачи (ID)\n   - Идентификатор ответственного (ID)\nПри создании логической модели базы данных необходимо учесть следующие требования:\n1. Каждая задача должна иметь уникальное название и описание.\n2. Каждая задача должна быть связана с ответственным за ее выполнение.\n3. Каждая задача должна иметь дату создания и дату завершения.\n4. Каждая задача может иметь несколько комментариев.\n5. Каждая задача может иметь несколько ответственных.\n6. Каждая задача может иметь несколько статусов.", "Comments": [], "entities": [{"start_offset": 413, "end_offset": 433, "label": "integer"}, {"start_offset": 444, "end_offset": 459, "label": "string"}, {"start_offset": 465, "end_offset": 480, "label": "string"}, {"start_offset": 486, "end_offset": 509, "label": "string"}, {"start_offset": 515, "end_offset": 535, "label": "timestamp"}, {"start_offset": 541, "end_offset": 563, "label": "timestamp"}, {"start_offset": 569, "end_offset": 582, "label": "string"}, {"start_offset": 657, "end_offset": 682, "label": "integer"}, {"start_offset": 693, "end_offset": 713, "label": "integer"}, {"start_offset": 724, "end_offset": 741, "label": "string"}, {"start_offset": 747, "end_offset": 764, "label": "string"}, {"start_offset": 770, "end_offset": 795, "label": "timestamp"}, {"start_offset": 832, "end_offset": 853, "label": "integer"}, {"start_offset": 864, "end_offset": 880, "label": "string"}, {"start_offset": 923, "end_offset": 951, "label": "integer"}, {"start_offset": 962, "end_offset": 980, "label": "string"}, {"start_offset": 986, "end_offset": 1008, "label": "string"}, {"start_offset": 1043, "end_offset": 1063, "label": "integer"}, {"start_offset": 1074, "end_offset": 1102, "label": "integer"}]}
{"id": 1404, "text": "Создайте логическую модель базы данных для системы управления складом.\nСистема управления складом предназначена для учета товаров на складе, контроля их движения и отслеживания запасов. Она позволяет добавлять товары на склад, проводить инвентаризацию, отслеживать перемещение товаров между складами и продавать товары.\nЛогическая модель базы данных должна включать следующие элементы:\n1. Таблица \"Товары\" с полями:\n   - Идентификатор товара (ID)\n   - Название товара\n   - Описание товара\n   - Единица измерения товара\n   - Цена товара\n   - Количество товара на складе\n   - Дата добавления товара на склад\n2. Таблица \"Склады\" с полями:\n   - Идентификатор склада (ID)\n   - Название склада\n   - Адрес склада\n3. Таблица \"Поставщики\" с полями:\n   - Идентификатор поставщика (ID)\n   - Название поставщика\n   - Адрес поставщика\n4. Таблица \"Заказы\" с полями:\n   - Идентификатор заказа (ID)\n   - Дата заказа\n   - Идентификатор поставщика (ID)\n   - Идентификатор склада (ID)\n   - Название товара\n   - Количество товара\n5. Таблица \"Перемещения\" с полями:\n   - Идентификатор перемещения (ID)\n   - Дата перемещения\n   - Идентификатор склада (ID)\n   - Идентификатор товара (ID)\n   - Количество товара\n   - Идентификатор склада назначения (ID)\nПри создании логической модели базы данных необходимо учесть следующие требования:\n1. Каждый товар должен иметь уникальное название и описание.\n2. Каждый товар должен быть связан с единицей измерения и ценой.\n3. Каждый товар должен иметь информацию о количестве на складе и дате добавления на склад.\n4. Каждый склад должен иметь уникальное название и адрес.\n5. Каждый заказ должен быть связан с поставщиком и складом.\n6. Каждый заказ должен содержать информацию о названии товара и количестве.\n7. Каждый заказ должен быть связан с перемещением товара на склад.\n8. Каждый перемещение должен содержать информацию о количестве товара, складе назначения и дате перемещения.", "Comments": [], "entities": [{"start_offset": 421, "end_offset": 441, "label": "integer"}, {"start_offset": 452, "end_offset": 467, "label": "string"}, {"start_offset": 473, "end_offset": 488, "label": "string"}, {"start_offset": 494, "end_offset": 518, "label": "string"}, {"start_offset": 524, "end_offset": 535, "label": "double"}, {"start_offset": 541, "end_offset": 568, "label": "integer"}, {"start_offset": 574, "end_offset": 605, "label": "timestamp"}, {"start_offset": 641, "end_offset": 661, "label": "integer"}, {"start_offset": 672, "end_offset": 687, "label": "string"}, {"start_offset": 693, "end_offset": 705, "label": "string"}, {"start_offset": 746, "end_offset": 769, "label": "integer"}, {"start_offset": 780, "end_offset": 799, "label": "string"}, {"start_offset": 805, "end_offset": 821, "label": "string"}, {"start_offset": 857, "end_offset": 877, "label": "integer"}, {"start_offset": 888, "end_offset": 899, "label": "timestamp"}, {"start_offset": 905, "end_offset": 929, "label": "integer"}, {"start_offset": 940, "end_offset": 960, "label": "integer"}, {"start_offset": 971, "end_offset": 986, "label": "string"}, {"start_offset": 992, "end_offset": 1009, "label": "integer"}, {"start_offset": 1050, "end_offset": 1074, "label": "integer"}, {"start_offset": 1086, "end_offset": 1102, "label": "timestamp"}, {"start_offset": 1108, "end_offset": 1128, "label": "integer"}, {"start_offset": 1139, "end_offset": 1159, "label": "integer"}, {"start_offset": 1170, "end_offset": 1187, "label": "integer"}, {"start_offset": 1193, "end_offset": 1224, "label": "integer"}]}
{"id": 1405, "text": "Задача: Создать логическую модель базы данных для системы управления учебным процессом.\nСистема управления учебным процессом предназначена для организации и контроля учебного процесса в образовательном учреждении. Она позволяет создавать учебные планы, назначать преподавателей, регистрировать студентов, отслеживать успеваемость и оставлять комментарии.\nЛогическая модель базы данных должна включать следующие элементы:\n1. Таблица \"Учебные планы\" с полями:\n   - Идентификатор учебного плана (ID)\n   - Название учебного плана\n   - Описание учебного плана\n   - Дата создания учебного плана\n   - Дата завершения учебного плана\n2. Таблица \"Преподаватели\" с полями:\n   - Идентификатор преподавателя (ID)\n   - Имя преподавателя\n   - Фамилия преподавателя\n   - Должность преподавателя\n3. Таблица \"Студенты\" с полями:\n   - Идентификатор студента (ID)\n   - Имя студента\n   - Фамилия студента\n   - Группа студента\n4. Таблица \"Успеваемость\" с полями:\n   - Идентификатор студента (ID)\n   - Идентификатор учебного плана (ID)\n   - Оценка студента\n   - Дата оценки\n5. Таблица \"Комментарии\" с полями:\n   - Идентификатор комментария (ID)\n   - Идентификатор студента (ID)\n   - Автор комментария\n   - Текст комментария\n   - Дата создания комментария\nПри создании логической модели базы данных необходимо учесть следующие требования:\n1. Каждый учебный план должен иметь уникальное название и описание.\n2. Каждый учебный план должен быть связан с преподавателем.\n3. Каждый студент должен быть зарегистрирован в системе и иметь уникальные имя и фамилию.\n4. Каждый студент должен быть связан с учебным планом и иметь оценку по этому плану.\n5. Каждый студент может иметь несколько оценок по разным учебным планам.\n6. Каждый студент может иметь несколько комментариев от преподавателей.", "Comments": [], "entities": [{"start_offset": 463, "end_offset": 491, "label": "integer"}, {"start_offset": 502, "end_offset": 525, "label": "string"}, {"start_offset": 531, "end_offset": 554, "label": "string"}, {"start_offset": 560, "end_offset": 588, "label": "timestamp"}, {"start_offset": 594, "end_offset": 624, "label": "timestamp"}, {"start_offset": 667, "end_offset": 694, "label": "integer"}, {"start_offset": 705, "end_offset": 722, "label": "string"}, {"start_offset": 728, "end_offset": 749, "label": "string"}, {"start_offset": 755, "end_offset": 778, "label": "string"}, {"start_offset": 816, "end_offset": 838, "label": "integer"}, {"start_offset": 849, "end_offset": 861, "label": "string"}, {"start_offset": 867, "end_offset": 883, "label": "string"}, {"start_offset": 889, "end_offset": 904, "label": "string"}, {"start_offset": 946, "end_offset": 968, "label": "integer"}, {"start_offset": 979, "end_offset": 1007, "label": "integer"}, {"start_offset": 1018, "end_offset": 1033, "label": "integer"}, {"start_offset": 1039, "end_offset": 1050, "label": "timestamp"}, {"start_offset": 1091, "end_offset": 1116, "label": "integer"}, {"start_offset": 1127, "end_offset": 1149, "label": "integer"}, {"start_offset": 1160, "end_offset": 1177, "label": "string"}, {"start_offset": 1183, "end_offset": 1200, "label": "string"}, {"start_offset": 1206, "end_offset": 1231, "label": "timestamp"}]}
{"id": 1406, "text": "Задача: Создать базу данных для библиотеки, содержащую информацию о книгах, читателях и выдаче книг. База данных должна содержать следующие таблицы:\n1. Таблица \"Книги\" с полями: ID книги, Название книги, Автор книги, Год издания, Количество страниц.\n2. Таблица \"Читатели\" с полями: ID читателя, ФИО читателя, Адрес читателя, Телефон читателя.\n3. Таблица \"Выдача книг\" с полями: ID выдачи, ID книги, ID читателя, Дата выдачи, Дата возврата.", "Comments": [], "entities": [{"start_offset": 178, "end_offset": 186, "label": "integer"}, {"start_offset": 188, "end_offset": 202, "label": "string"}, {"start_offset": 204, "end_offset": 215, "label": "string"}, {"start_offset": 217, "end_offset": 228, "label": "integer"}, {"start_offset": 230, "end_offset": 248, "label": "integer"}, {"start_offset": 282, "end_offset": 293, "label": "integer"}, {"start_offset": 295, "end_offset": 307, "label": "string"}, {"start_offset": 309, "end_offset": 323, "label": "string"}, {"start_offset": 325, "end_offset": 341, "label": "integer"}, {"start_offset": 378, "end_offset": 387, "label": "integer"}, {"start_offset": 389, "end_offset": 397, "label": "integer"}, {"start_offset": 399, "end_offset": 410, "label": "integer"}, {"start_offset": 412, "end_offset": 423, "label": "timestamp"}, {"start_offset": 425, "end_offset": 438, "label": "timestamp"}]}
{"id": 1407, "text": "Задача: Создать базу данных для ресторана, содержащую информацию о блюдах, заказах и клиентах. База данных должна содержать следующие таблицы:\n1. Таблица \"Блюда\" с полями: ID блюда, Название блюда, Описание блюда, Цена блюда.\n2. Таблица \"Заказы\" с полями: ID заказа, Дата заказа, ID клиента, ID блюда, Количество блюд в заказе.\n3. Таблица \"Клиенты\" с полями: ID клиента, ФИО клиента, Адрес доставки, Телефон клиента.", "Comments": [], "entities": [{"start_offset": 172, "end_offset": 180, "label": "integer"}, {"start_offset": 182, "end_offset": 196, "label": "string"}, {"start_offset": 198, "end_offset": 212, "label": "string"}, {"start_offset": 214, "end_offset": 224, "label": "double"}, {"start_offset": 256, "end_offset": 265, "label": "integer"}, {"start_offset": 267, "end_offset": 278, "label": "timestamp"}, {"start_offset": 280, "end_offset": 290, "label": "integer"}, {"start_offset": 292, "end_offset": 300, "label": "integer"}, {"start_offset": 302, "end_offset": 326, "label": "integer"}, {"start_offset": 359, "end_offset": 369, "label": "integer"}, {"start_offset": 371, "end_offset": 382, "label": "string"}, {"start_offset": 384, "end_offset": 398, "label": "string"}, {"start_offset": 400, "end_offset": 415, "label": "integer"}]}
{"id": 1408, "text": "Задача: Создать базу данных для медицинского центра, содержащую информацию о пациентах, врачах и назначениях. База данных должна содержать следующие таблицы:\n1. Таблица \"Пациенты\" с полями: ID пациента, ФИО пациента, Дата рождения, Адрес проживания, Телефон пациента.\n2. Таблица \"Врачи\" с полями: ID врача, ФИО врача, Специальность врача, Опыт работы.\n3. Таблица \"Назначения\" с полями: ID назначения, ID пациента, ID врача, Дата назначения, Описание назначения.", "Comments": [], "entities": [{"start_offset": 190, "end_offset": 201, "label": "integer"}, {"start_offset": 203, "end_offset": 215, "label": "string"}, {"start_offset": 217, "end_offset": 230, "label": "timestamp"}, {"start_offset": 232, "end_offset": 248, "label": "string"}, {"start_offset": 250, "end_offset": 266, "label": "integer"}, {"start_offset": 296, "end_offset": 305, "label": "integer"}, {"start_offset": 307, "end_offset": 316, "label": "string"}, {"start_offset": 318, "end_offset": 337, "label": "string"}, {"start_offset": 339, "end_offset": 350, "label": "integer"}, {"start_offset": 386, "end_offset": 399, "label": "integer"}, {"start_offset": 401, "end_offset": 412, "label": "integer"}, {"start_offset": 414, "end_offset": 422, "label": "integer"}, {"start_offset": 424, "end_offset": 439, "label": "timestamp"}, {"start_offset": 441, "end_offset": 460, "label": "string"}]}
{"id": 1409, "text": "Задача: Создать базу данных для фитнес-клуба, содержащую информацию о клиентах, тренерах и занятиях. База данных должна содержать следующие таблицы:\n1. Таблица \"Клиенты\" с полями: ID клиента, ФИО клиента, Дата рождения, Адрес проживания, Телефон клиента.\n2. Таблица \"Тренеры\" с полями: ID тренера, ФИО тренера, Опыт работы, Специализация.\n3. Таблица \"Занятия\" с полями: ID занятия, Дата занятия, ID тренера, ID клиента, Описание занятия.", "Comments": [], "entities": [{"start_offset": 179, "end_offset": 190, "label": "integer"}, {"start_offset": 192, "end_offset": 203, "label": "string"}, {"start_offset": 205, "end_offset": 218, "label": "timestamp"}, {"start_offset": 220, "end_offset": 236, "label": "string"}, {"start_offset": 238, "end_offset": 253, "label": "integer"}, {"start_offset": 286, "end_offset": 296, "label": "integer"}, {"start_offset": 298, "end_offset": 309, "label": "string"}, {"start_offset": 311, "end_offset": 322, "label": "integer"}, {"start_offset": 324, "end_offset": 337, "label": "string"}, {"start_offset": 370, "end_offset": 380, "label": "integer"}, {"start_offset": 382, "end_offset": 394, "label": "timestamp"}, {"start_offset": 396, "end_offset": 406, "label": "integer"}, {"start_offset": 407, "end_offset": 418, "label": "integer"}, {"start_offset": 420, "end_offset": 436, "label": "string"}]}
{"id": 1410, "text": "Задача: Создать базу данных для туристического агентства, содержащую информацию о турах, клиентах и бронировании. База данных должна содержать следующие таблицы:\n1. Таблица \"Туры\" с полями: ID тура, Название тура, Описание тура, Дата начала, Продолжительность, Стоимость.\n2. Таблица \"Клиенты\" с полями: ID клиента, ФИО клиента, Адрес проживания, Телефон клиента.\n3. Таблица \"Бронирование\" с полями: ID бронирования, ID тура, ID клиента, Дата бронирования, Статус бронирования.", "Comments": [], "entities": [{"start_offset": 190, "end_offset": 197, "label": "integer"}, {"start_offset": 199, "end_offset": 212, "label": "string"}, {"start_offset": 214, "end_offset": 227, "label": "string"}, {"start_offset": 229, "end_offset": 240, "label": "timestamp"}, {"start_offset": 242, "end_offset": 259, "label": "integer"}, {"start_offset": 261, "end_offset": 270, "label": "double"}, {"start_offset": 303, "end_offset": 313, "label": "integer"}, {"start_offset": 315, "end_offset": 326, "label": "string"}, {"start_offset": 328, "end_offset": 344, "label": "string"}, {"start_offset": 346, "end_offset": 361, "label": "integer"}, {"start_offset": 399, "end_offset": 414, "label": "integer"}, {"start_offset": 416, "end_offset": 423, "label": "integer"}, {"start_offset": 425, "end_offset": 435, "label": "integer"}, {"start_offset": 437, "end_offset": 454, "label": "timestamp"}, {"start_offset": 456, "end_offset": 475, "label": "string"}]}
{"id": 1411, "text": "Задача: Создать базу данных для автосервиса, содержащую информацию о автомобилях, услугах и заказах. База данных должна содержать следующие таблицы:\n1. Таблица \"Автомобили\" с полями: ID автомобиля, Марка автомобиля, Модель автомобиля, Год выпуска, Пробег.\n2. Таблица \"Услуги\" с полями: ID услуги, Название услуги, Описание услуги, Стоимость услуги.\n3. Таблица \"Заказы\" с полями: ID заказа, Дата заказа, ID автомобиля, ID услуги, Описание заказа.", "Comments": [], "entities": [{"start_offset": 183, "end_offset": 196, "label": "integer"}, {"start_offset": 198, "end_offset": 214, "label": "string"}, {"start_offset": 216, "end_offset": 233, "label": "string"}, {"start_offset": 235, "end_offset": 246, "label": "integer"}, {"start_offset": 248, "end_offset": 254, "label": "integer"}, {"start_offset": 286, "end_offset": 295, "label": "integer"}, {"start_offset": 297, "end_offset": 312, "label": "string"}, {"start_offset": 314, "end_offset": 329, "label": "string"}, {"start_offset": 331, "end_offset": 347, "label": "double"}, {"start_offset": 379, "end_offset": 388, "label": "integer"}, {"start_offset": 390, "end_offset": 401, "label": "timestamp"}, {"start_offset": 403, "end_offset": 416, "label": "integer"}, {"start_offset": 418, "end_offset": 427, "label": "integer"}, {"start_offset": 429, "end_offset": 444, "label": "string"}]}
{"id": 1412, "text": "Задача: Создать базу данных для школы, содержащую информацию о учениках, учителях и оценках. База данных должна содержать следующие таблицы:\n1. Таблица \"Ученики\" с полями: ID ученика, ФИО ученика, Класс, Адрес проживания, Телефон ученика.\n2. Таблица \"Учителя\" с полями: ID учителя, ФИО учителя, Предмет, Опыт работы.\n3. Таблица \"Оценки\" с полями: ID оценки, ID ученика, ID учителя, Предмет, Оценка.", "Comments": [], "entities": [{"start_offset": 172, "end_offset": 182, "label": "integer"}, {"start_offset": 184, "end_offset": 195, "label": "string"}, {"start_offset": 197, "end_offset": 202, "label": "integer"}, {"start_offset": 204, "end_offset": 220, "label": "string"}, {"start_offset": 222, "end_offset": 237, "label": "integer"}, {"start_offset": 270, "end_offset": 280, "label": "integer"}, {"start_offset": 282, "end_offset": 293, "label": "string"}, {"start_offset": 295, "end_offset": 302, "label": "string"}, {"start_offset": 304, "end_offset": 315, "label": "integer"}, {"start_offset": 347, "end_offset": 356, "label": "integer"}, {"start_offset": 358, "end_offset": 368, "label": "integer"}, {"start_offset": 370, "end_offset": 380, "label": "integer"}, {"start_offset": 382, "end_offset": 389, "label": "string"}, {"start_offset": 391, "end_offset": 397, "label": "integer"}]}
{"id": 1413, "text": "Задача: Создать базу данных для курьерской службы, содержащую информацию о заказах, курьерах и доставке. База данных должна содержать следующие таблицы:\n1. Таблица \"Заказы\" с полями: ID заказа, Дата заказа, Адрес отправителя, Адрес получателя, Описание заказа.\n2. Таблица \"Курьеры\" с полями: ID курьера, ФИО курьера, Телефон курьера.\n3. Таблица \"Доставка\" с полями: ID доставки, ID заказа, ID курьера, Дата доставки, Статус доставки.", "Comments": [], "entities": [{"start_offset": 183, "end_offset": 192, "label": "integer"}, {"start_offset": 194, "end_offset": 205, "label": "timestamp"}, {"start_offset": 207, "end_offset": 224, "label": "string"}, {"start_offset": 226, "end_offset": 242, "label": "string"}, {"start_offset": 244, "end_offset": 259, "label": "string"}, {"start_offset": 292, "end_offset": 302, "label": "integer"}, {"start_offset": 304, "end_offset": 315, "label": "string"}, {"start_offset": 317, "end_offset": 332, "label": "integer"}, {"start_offset": 366, "end_offset": 377, "label": "integer"}, {"start_offset": 379, "end_offset": 389, "label": "integer"}, {"start_offset": 390, "end_offset": 400, "label": "integer"}, {"start_offset": 402, "end_offset": 415, "label": "timestamp"}, {"start_offset": 417, "end_offset": 432, "label": "string"}]}
{"id": 1414, "text": "Задача: Создать базу данных для спортивного клуба, содержащую информацию о тренерах, спортсменах и тренировках. База данных должна содержать следующие таблицы:\n1. Таблица \"Тренеры\" с полями: ID тренера, ФИО тренера, Опыт работы, Специализация.\n2. Таблица \"Спортсмены\" с полями: ID спортсмена, ФИО спортсмена, Дата рождения, Адрес проживания, Телефон спортсмена.\n3. Таблица \"Тренировки\" с полями: ID тренировки, Дата тренировки, ID тренера, ID спортсмена, Описание тренировки.", "Comments": [], "entities": [{"start_offset": 191, "end_offset": 201, "label": "integer"}, {"start_offset": 203, "end_offset": 214, "label": "string"}, {"start_offset": 216, "end_offset": 227, "label": "integer"}, {"start_offset": 229, "end_offset": 242, "label": "string"}, {"start_offset": 278, "end_offset": 291, "label": "integer"}, {"start_offset": 293, "end_offset": 307, "label": "string"}, {"start_offset": 309, "end_offset": 322, "label": "timestamp"}, {"start_offset": 324, "end_offset": 340, "label": "string"}, {"start_offset": 342, "end_offset": 360, "label": "integer"}, {"start_offset": 395, "end_offset": 409, "label": "integer"}, {"start_offset": 411, "end_offset": 426, "label": "timestamp"}, {"start_offset": 428, "end_offset": 438, "label": "integer"}, {"start_offset": 440, "end_offset": 453, "label": "integer"}, {"start_offset": 455, "end_offset": 474, "label": "string"}]}
{"id": 1415, "text": "Задача: Создать базу данных для гостиницы, содержащую информацию о номерах, гостях и бронировании. База данных должна содержать следующие таблицы:\n1. Таблица \"Номера\" с полями: ID номера, Название номера, Категория номера, Стоимость номера.\n2. Таблица \"Гости\" с полями: ID гостя, ФИО гостя, Дата рождения, Адрес проживания, Телефон гостя.\n3. Таблица \"Бронирование\" с полями: ID бронирования, Дата бронирования, ID номера, ID гостя, Статус бронирования.", "Comments": [], "entities": [{"start_offset": 177, "end_offset": 186, "label": "integer"}, {"start_offset": 188, "end_offset": 203, "label": "string"}, {"start_offset": 205, "end_offset": 221, "label": "string"}, {"start_offset": 223, "end_offset": 239, "label": "double"}, {"start_offset": 270, "end_offset": 278, "label": "integer"}, {"start_offset": 280, "end_offset": 289, "label": "string"}, {"start_offset": 291, "end_offset": 304, "label": "timestamp"}, {"start_offset": 306, "end_offset": 322, "label": "string"}, {"start_offset": 324, "end_offset": 337, "label": "integer"}, {"start_offset": 375, "end_offset": 390, "label": "integer"}, {"start_offset": 392, "end_offset": 409, "label": "timestamp"}, {"start_offset": 411, "end_offset": 420, "label": "integer"}, {"start_offset": 422, "end_offset": 430, "label": "integer"}, {"start_offset": 432, "end_offset": 451, "label": "string"}]}
