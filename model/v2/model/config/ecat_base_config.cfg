[paths]
train = null
dev = null
vectors = null

[system]
seed = 342
gpu_allocator = "pytorch"

[nlp]
lang = "ru"
pipeline = ["transformer", "entity_categorizer"]
batch_size = 1000

[components]

[components.transformer]
factory = "transformer"
max_batch_items = 4096

[components.transformer.model]
@architectures = "spacy-transformers.TransformerModel.v3"
name = "bert-base-multilingual-uncased"
tokenizer_config = {"use_fast": true}

[components.transformer.model.get_spans]
@span_getters = "spacy-transformers.strided_spans.v1"
window = 128
stride = 96

[components.entity_categorizer]
factory = "entity_categorizer"
threshold = 0.25

[components.entity_categorizer.model]
@architectures = "ecat_model.v1"

[components.entity_categorizer.model.create_entity_tensor]
@architectures = "ecat_entity_tensor.v1"

[components.entity_categorizer.model.create_entity_tensor.tok2vec]
@architectures = "spacy-transformers.TransformerListener.v1"
grad_factor = 1.0

[components.entity_categorizer.model.create_entity_tensor.tok2vec.pooling]
@layers = "reduce_mean.v1"

[components.entity_categorizer.model.create_entity_tensor.pooling]
@layers = "reduce_mean.v1"

[components.entity_categorizer.model.create_entity_tensor.get_entities]
@misc = "ecat_entity_finder.v1"
target = ["LATTRIBUTE"]

[components.entity_categorizer.model.classification_layer]
@architectures = "ecat_classification_layer.v1"
nI = null
nO = null

[corpora]

[corpora.train]
@readers = "Gold_ents_Corpus.v1"
file = ${paths.train}
max_length = 0

[corpora.dev]
@readers = "Gold_ents_Corpus.v1"
file = ${paths.dev}
max_length = 0

[training]
accumulate_gradient = 1
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
patience = 1600000
max_steps = 2000
eval_frequency = 100

[training.optimizer]
@optimizers = "Adam.v1"

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = 20000
initial_rate = 5e-5

[training.batcher]
@batchers = "spacy.batch_by_padded.v1"
discard_oversize = true
size = 2000
buffer = 256

[initialize]
vectors = ${paths.vectors}

[training.score_weights]
ecat_micro_p = 0.0
ecat_micro_r = 0.0
ecat_micro_f = 1.0