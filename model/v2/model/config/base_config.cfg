# This is an auto-generated partial config. To use it with 'spacy train'
# you can run spacy init fill-config to auto-fill all default settings:
# python -m spacy init fill-config ./base_config.cfg ./config.cfg
[paths]
train = null
dev = null
vectors = null
[system]
gpu_allocator = "pytorch"

[nlp]
lang = "ru"
# pipeline = ["transformer", "ner", "relation_extractor", "entity_categorizer", "lemmatizer"]
pipeline = ["transformer", "ner", "relation_extractor"]
batch_size = 1000

[components]

[components.transformer]
factory = "transformer"
max_batch_items = 4096
set_extra_annotations = {"@annotation_setters":"spacy-transformers.null_annotation_setter.v1"}

[components.transformer.model]
@architectures = "spacy-transformers.TransformerModel.v3"
name = "bert-base-multilingual-uncased"
tokenizer_config = {"use_fast": true}

[components.transformer.model.get_spans]
@span_getters = "spacy-transformers.strided_spans.v1"
window = 128
stride = 96

[components.ner]
factory = "ner"

[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = false
nO = null

[components.ner.model.tok2vec]
@architectures = "spacy-transformers.TransformerListener.v1"
grad_factor = 1.0

[components.ner.model.tok2vec.pooling]
@layers = "reduce_mean.v1"

[components.relation_extractor]
factory = "relation_extractor"
threshold = 0.8

[components.relation_extractor.model]
@architectures = "rel_model.v1"

[components.relation_extractor.model.create_instance_tensor]
@architectures = "rel_instance_tensor.v1"

[components.relation_extractor.model.create_instance_tensor.tok2vec]
@architectures = "spacy-transformers.TransformerListener.v1"
grad_factor = 1.0

[components.relation_extractor.model.create_instance_tensor.tok2vec.pooling]
@layers = "reduce_mean.v1"

[components.relation_extractor.model.create_instance_tensor.pooling]
@layers = "reduce_mean.v1"

[components.relation_extractor.model.create_instance_tensor.get_instances]
@misc = "rel_instance_generator.v1"
max_length = 50

[components.relation_extractor.model.classification_layer]
@architectures = "rel_classification_layer.v1"
nI = null
nO = null

# [components.entity_categorizer]
# factory = "entity_categorizer"
# threshold = 0.8

# [components.entity_categorizer.model]
# @architectures = "ecat_model.v1"

# [components.entity_categorizer.model.create_entity_tensor]
# @architectures = "ecat_entity_tensor.v1"

# [components.entity_categorizer.model.create_entity_tensor.tok2vec]
# @architectures = "spacy-transformers.TransformerListener.v1"
# grad_factor = 1.0

# [components.entity_categorizer.model.create_entity_tensor.tok2vec.pooling]
# @layers = "reduce_mean.v1"

# [components.entity_categorizer.model.create_entity_tensor.pooling]
# @layers = "reduce_mean.v1"

# [components.entity_categorizer.model.create_entity_tensor.get_entities]
# @misc = "ecat_entity_finder.v1"
# target = ["LATTRIBUTE"]

# [components.entity_categorizer.model.classification_layer]
# @architectures = "ecat_classification_layer.v1"
# nI = null
# nO = null

# # [components.morphologizer]
# # source = "ru_core_news_sm"

# [components.lemmatizer]
# source = "ru_core_news_sm"

[corpora]

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
gold_preproc = true
# @readers = "Gold_ents_Corpus.v1"
# file = ${paths.train}
max_length = 0

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
gold_preproc = true
# @readers = "Gold_ents_Corpus.v1"
# file = ${paths.dev}
max_length = 0

[training]
accumulate_gradient = 1
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
dropout = 0.1
patience = 1600000
max_steps = 2000
eval_frequency = 100
annotating_components = ["ner"]

[training.optimizer]
@optimizers = "Adam.v1"

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = 20000
initial_rate = 5e-5

[training.batcher]
@batchers = "spacy.batch_by_padded.v1"
discard_oversize = true
size = 2000
buffer = 256

[initialize]
vectors = ${paths.vectors}

[training.score_weights]
rel_micro_p = 0.0
rel_micro_r = 0.0
rel_micro_f = 1.0
# ecat_micro_p = 0.0
# ecat_micro_r = 0.0
# ecat_micro_f = 1.0